// ------------  Paquete e importaciones ------------
package statpy;

import java_cup.runtime.*;
import clases.Erroor;
import func.Funcion;
import traductionPy.indentPy;
import java.util.LinkedList; 


//------> Codigo para el parser
//------> Declaracion de variables, funciones y funciones de error

parser code 
{:
    public static String resultado = ""; 

    public void syntax_error(Symbol s)
    {       
            Erroor errorsito = new Erroor("Sintactico", s.value.toString() ,"No es valido en este lenguaje sintact", s.right, s.left);
            Funcion.ErrorList.add(errorsito);
            System.err.println("Error Sintactico: "+ s.value.toString() + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );        
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {       
            Erroor errorsito = new Erroor("Sintactico", s.value.toString() ,"No es valido en este lenguaje sintact", s.right, s.left);
            Funcion.ErrorList.add(errorsito);
            System.err.println("Error Sintactico: "+ s.value.toString() + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
    }

:}


//------> Codigo para las acciones gramaticales (no tocar)
action code
{:  :}


//------> Declaración de terminales
terminal String TkENTERO, TkDECIMAL ,TkCOMENTmULTI, TkCOMENTnORMAL,TkCADENA,TkErChar;
terminal String TkSUMA,R_MOSTRAR,TkMULTIPLICACION,TkRESTA,TkDIVISION,TkIGUAL;
terminal String TkPUNTOYCOMA,TkDOSPUNTOS,TkPUNTO,TkCOMA;
terminal String TkLLAVEA,TkLLAVEC,TkPARENTESISAbre,TkPARENTESISCierra,TkCORCHETEAbre,TkCORCHETECierra,TkCorchetesArreglo;
terminal String TkMAYORQUE, TkMENORQUE, TkMAYORIGUAL, TkMENORIGUAL,TkIGUALIGUAL,TkSignoDolar,TkIDISTINTO;
terminal String TkAND,TkOR, TkNOT,TkIncremento;
terminal String TkINT_R,TkDOUBLE_R,TkCHAR_R,TkBOOL_R,TkSTRING_R;
terminal String TkVOID_R,TkMAIN_R;
terminal String TkIF_R, TkELSE_R, TkCASE_R,TkBRAKE_R,TkDEFAULT_R;
terminal String TkCONSOLE_R,TkWRITE_R;
terminal String TkFOR_R, TkDO_R,TkWHILE_R;
terminal String TkDEFINIR_GLOBALES_R,TkGRAFICA_BARRAS_R,TkGRAFICA_PIE_R, TkNewValor;
terminal String TkEjeX,TkTituloX,TkTituloY,TkTitulo,TkValores;
terminal STring TkTrue,TkFalse;

//------> Declaración de no terminales
non terminal inicio;
non terminal instruccionTraduccion;
non terminal instruccionGraficas;
non terminal LinkedList listainstrTraduccion;
non terminal listainstrGraficas;
non terminal expresionTraduccion, expresionGraficas;
non terminal instruccionIF, instruccionConsoleWr, instruccionWhile;
non terminal expresionRelacional;


//------> PRECEDENCIA
precedence left TkOR;
precedence left TkAND;
precedence right TkNOT;
precedence left TkIGUALIGUAL,TkIDISTINTO,TkMENORQUE,TkMENORIGUAL,TkMAYORQUE,TkMAYORIGUAL; 
precedence left TkRESTA,TkSUMA;
precedence left TkMULTIPLICACION, TkDIVISION;
precedence right TkRESTA;


//------> Definir Simbolo Inicial
start with inicio; 


// ------------>  Producciones  <------------



inicio::= TkVOID_R TkMAIN_R TkPARENTESISAbre  TkPARENTESISCierra  TkLLAVEA  listainstrTraduccion:lista TkLLAVEC
                            {:   
                            
                            LinkedList<String> listaN = new LinkedList<>();
                            listaN.add("def main( ):");
                            func.Funcion.ContadorIndentacion++;
                            listaN.addAll(func.Funcion.IndentacionPY(lista));
                            func.Funcion.ContadorIndentacion--;
                            listaN.add("if__name__ = \"__main__\":\n\tmain()");
                            func.Funcion.ListaTraducccionPy = listaN;
                                
                            :}
;

listainstrTraduccion ::= listainstrTraduccion:lista  instruccionTraduccion: val 
                            {: 
                                lista.addAll((LinkedList) val);
                                RESULT = (LinkedList) lista;
                            :}
                        | instruccionTraduccion:val            
                            {:
                                LinkedList<String> lista = new LinkedList<>();
                                lista.addAll((LinkedList)val);
                                RESULT = (LinkedList) lista;
                            :}
;

instruccionTraduccion ::= instruccionConsoleWr: val {:RESULT = val;:}
                         | instruccionIF: val {:RESULT = val;:}
;


expresionTraduccion ::= expresionTraduccion: a  TkSUMA  expresionTraduccion:b {:RESULT =  a.toString()+"+"+b.toString() ;:}
                    |expresionTraduccion: a  TkRESTA  expresionTraduccion:b {: RESULT = a.toString()+"-"+b.toString();:}
                    |expresionTraduccion: a  TkMULTIPLICACION expresionTraduccion:b {:RESULT = a.toString()+"*"+b.toString() ;:}
                    |expresionTraduccion: a  TkDIVISION   expresionTraduccion:b {:RESULT = a.toString()+"/"+b.toString() ;:}
                    |TkRESTA expresionTraduccion:b {:RESULT = "-"+b.toString() ;:}
                    |TkENTERO: val {:RESULT = val;:}
                    |TkDECIMAL: val {:RESULT = val;:}
                    |TkErChar: val {:RESULT = val;:}
                    |TkCADENA: val {:RESULT = val;:}
                    |expresionTraduccion:b  expresionRelacional:a  expresionTraduccion:c  {: RESULT = b.toString()+a.toString()+c.toString();:}
                    |TkNOT expresionTraduccion:a {:RESULT  = " not "+a.toString();:}
                    |expresionTraduccion:a TkAND expresionTraduccion:b {:RESULT  = a.toString()+" and "+b.toString();:}
                    |expresionTraduccion:a TkOR expresionTraduccion:b {:RESULT  = a.toString()+" or "+b.toString();:}
                    |TkTrue {:RESULT = " True ";:}
                    |TkFalse {:RESULT = " False ";:}
                    |TkCADENA: a  TkSUMA  expresionTraduccion:b {:RESULT = a.toString()+" , "+b.toString();:}   

;




instruccionConsoleWr ::= TkCONSOLE_R TkPUNTO TkWRITE_R TkPARENTESISAbre expresionTraduccion:val TkPARENTESISCierra TkPUNTOYCOMA
                        {:
                            LinkedList<String> lista = new LinkedList<>();
                            lista.add("print("+val+")");
                            RESULT = lista;
                        :}
;


instruccionIF ::= TkIF_R TkPARENTESISAbre expresionTraduccion:exp TkPARENTESISCierra TkLLAVEA listainstrTraduccion:listaInstTrad TkLLAVEC
                {:
                    LinkedList<String> lista = new LinkedList<>();
                    lista.add("if " + exp + ":");
                    func.Funcion.ContadorIndentacion++;
                    lista.addAll(func.Funcion.IndentacionPY(listaInstTrad));
                    func.Funcion.ContadorIndentacion--;
                    RESULT = lista;
                :}
                | TkIF_R TkPARENTESISAbre expresionTraduccion:exp TkPARENTESISCierra TkLLAVEA listainstrTraduccion:listaInstTrad1 TkLLAVEC TkELSE_R TkLLAVEA listainstrTraduccion:listaInstTrad2 TkLLAVEC
                {:
                    LinkedList<String> lista = new LinkedList<>();
                    lista.add("if " + exp + ":");
                    func.Funcion.ContadorIndentacion++;
                    lista.addAll(func.Funcion.IndentacionPY(listaInstTrad1));
                    func.Funcion.ContadorIndentacion--;
                    lista.add("else:");
                    func.Funcion.ContadorIndentacion++;
                    lista.addAll(func.Funcion.IndentacionPY(listaInstTrad2));
                    func.Funcion.ContadorIndentacion--;
                    RESULT = lista;
                :} 
                
;


expresionRelacional ::= TkMAYORQUE: val {:RESULT = val;:}
                    | TkMENORQUE: val {:RESULT = val;:}
                    | TkMAYORIGUAL: val {:RESULT = val;:}
                    | TkMENORIGUAL: val {:RESULT = val;:}
                    | TkIGUALIGUAL: val {:RESULT = val;:}
                    | TkIDISTINTO: val {:RESULT = val;:}
; 








 