// ------------  Paquete e importaciones ------------
package statpy;

import java_cup.runtime.*;
import clases.Erroor;
import func.Funcion;
import traductionPy.indentPy;
import java.util.LinkedList; 


//------> Codigo para el parser
//------> Declaracion de variables, funciones y funciones de error

parser code 
{:
    public static String resultado = ""; 
    public static int contadorCases =0;

    public void syntax_error(Symbol s)
    {       
            Erroor errorsito = new Erroor("Sintactico", s.value.toString() ,"No es valido en este lenguaje sintact", s.right, s.left);
            Funcion.ErrorList.add(errorsito);
            System.err.println("Error Sintactico: "+ s.value.toString() + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );        
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {       
            Erroor errorsito = new Erroor("Sintactico", s.value.toString() ,"No es valido en este lenguaje sintact", s.right, s.left);
            Funcion.ErrorList.add(errorsito);
            System.err.println("Error Sintactico: "+ s.value.toString() + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
    }

:}


//------> Codigo para las acciones gramaticales (no tocar)
action code
{:  :}


//------> Declaración de terminales
terminal String TkENTERO, TkDECIMAL ,TkCADENA,TkErChar;
terminal String TkSUMA,R_MOSTRAR,TkMULTIPLICACION,TkRESTA,TkDIVISION,TkIGUAL;
terminal String TkPUNTOYCOMA,TkDOSPUNTOS,TkPUNTO,TkCOMA;
terminal String TkLLAVEA,TkLLAVEC,TkPARENTESISAbre,TkPARENTESISCierra,TkCORCHETEAbre,TkCORCHETECierra,TkCorchetesArreglo;
terminal String TkMAYORQUE, TkMENORQUE, TkMAYORIGUAL, TkMENORIGUAL,TkIGUALIGUAL,TkSignoDolar,TkIDISTINTO;
terminal String TkAND,TkOR, TkNOT,TkIncremento;
terminal String TkINT_R,TkDOUBLE_R,TkCHAR_R,TkBOOL_R,TkSTRING_R;
terminal String TkVOID_R,TkMAIN_R;
terminal String TkIF_R, TkELSE_R, TkCASE_R,TkBRAKE_R,TkDEFAULT_R;
terminal String TkCONSOLE_R,TkWRITE_R;
terminal String TkFOR_R, TkDO_R,TkWHILE_R;
terminal String TkDEFINIR_GLOBALES_R,TkGRAFICA_BARRAS_R,TkGRAFICA_PIE_R, TkNewValor;
terminal String TkEjeX,TkTituloX,TkTituloY,TkTitulo,TkValores;
terminal String TkTrue,TkFalse;
//terminal String TkElseIf;
terminal String TkSWITCH_R;
terminal String TkIdentificador;

//------> Declaración de no terminales
non terminal inicio;
non terminal instruccionTraduccion;
non terminal instruccionGraficas;
non terminal LinkedList listainstrTraduccion;
non terminal listainstrGraficas;
non terminal expresionTraduccion, expresionGraficas;
non terminal instruccionIF, instruccionConsoleWr, instruccionWhile;
non terminal expresionRelacional;
non terminal instruccionDowhile;
non terminal instruccionFor;
non terminal declaracionvariable;
non terminal tipoDato;
non terminal asignacionvariable;
non terminal instrucccionSwitch;
non terminal instruccionListaCasoss;
non terminal instruccionLlaveC;
non terminal instrucListCas;

//------> PRECEDENCIA
precedence left TkOR;
precedence left TkAND;
precedence right TkNOT;
precedence left TkIGUALIGUAL,TkIDISTINTO,TkMENORQUE,TkMENORIGUAL,TkMAYORQUE,TkMAYORIGUAL; 
precedence left TkRESTA,TkSUMA;
precedence left TkMULTIPLICACION, TkDIVISION;
precedence right TkRESTA;


//------> Definir Simbolo Inicial
start with inicio; 


// ------------>  Producciones  <------------



inicio::= TkVOID_R TkMAIN_R TkPARENTESISAbre  TkPARENTESISCierra  TkLLAVEA  listainstrTraduccion:lista TkLLAVEC
                            {:   
                            
                            LinkedList<String> listaN = new LinkedList<>();
                            listaN.add("def main( ):");
                            func.Funcion.ContadorIndentacion++;
                            listaN.addAll(func.Funcion.IndentacionPY(lista));
                            func.Funcion.ContadorIndentacion--;
                            listaN.add("if__name__ = \"__main__\":\n\tmain()");
                            func.Funcion.ListaTraducccionPy = listaN;
                                
                            :}
;

listainstrTraduccion ::= listainstrTraduccion:lista  instruccionTraduccion: val 
                            {: 
                                lista.addAll((LinkedList) val);
                                RESULT = (LinkedList) lista;
                            :}
                        | instruccionTraduccion:val            
                            {:
                                LinkedList<String> lista = new LinkedList<>();
                                lista.addAll((LinkedList)val);
                                RESULT = (LinkedList) lista;
                            :}
;

instruccionTraduccion ::= instruccionConsoleWr: val {:RESULT = val;:}
                         | instruccionIF: val {:RESULT = val;:}
                         | instruccionWhile: val {:RESULT = val;:}
                         | instruccionDowhile: val {:RESULT = val;:}
                         | declaracionvariable: val {:RESULT = val;:}
                         | asignacionvariable: val {:RESULT = val;:}
                         | instruccionFor : val {:RESULT = val;:}
                         | instrucccionSwitch : val {:RESULT = val;:}
                         | error TkPUNTOYCOMA
;


expresionTraduccion ::= expresionTraduccion: a  TkSUMA  expresionTraduccion:b {:RESULT =  a.toString()+"+"+b.toString() ;:}
                    |expresionTraduccion: a  TkRESTA  expresionTraduccion:b {: RESULT = a.toString()+"-"+b.toString();:}
                    |expresionTraduccion: a  TkMULTIPLICACION expresionTraduccion:b {:RESULT = a.toString()+"*"+b.toString() ;:}
                    |expresionTraduccion: a  TkDIVISION   expresionTraduccion:b {:RESULT = a.toString()+"/"+b.toString() ;:}
                    |TkRESTA expresionTraduccion:b {:RESULT = "-"+b.toString() ;:}
                    |TkENTERO: val {:RESULT = val;:}
                    |TkDECIMAL: val {:RESULT = val;:}
                    |TkErChar: val {:RESULT = val;:}
                    |TkCADENA: val {:RESULT = val;:}
                    |expresionTraduccion:b  expresionRelacional:a  expresionTraduccion:c  {: RESULT = b.toString()+a.toString()+c.toString();:}
                    |TkNOT expresionTraduccion:a {:RESULT  = " not "+a.toString();:}
                    |expresionTraduccion:a TkAND expresionTraduccion:b {:RESULT  = a.toString()+" and "+b.toString();:}
                    |expresionTraduccion:a TkOR expresionTraduccion:b {:RESULT  = a.toString()+" or "+b.toString();:}
                    |TkTrue {:RESULT = " True ";:}
                    |TkFalse {:RESULT = " False ";:}
                    |TkCADENA: a  TkSUMA  expresionTraduccion:b {:RESULT = a.toString()+" , "+b.toString();:}   
                    |TkIdentificador : val {:RESULT = val;:}
                    |TkIdentificador : a  TkSUMA expresionTraduccion:b {:RESULT = a.toString()+" + "+b.toString();:}   
                    

;




instruccionConsoleWr ::= TkCONSOLE_R TkPUNTO TkWRITE_R TkPARENTESISAbre expresionTraduccion:val TkPARENTESISCierra TkPUNTOYCOMA
                        {:
                            LinkedList<String> lista = new LinkedList<>();
                            lista.add("print("+val+")");
                            RESULT = lista;
                        :}
;

//TkElseIf

instruccionIF::=  TkIF_R TkPARENTESISAbre expresionTraduccion:exp TkPARENTESISCierra TkLLAVEA  listainstrTraduccion:listaInstTrad  instruccionLlaveC:listacierre
                    {:
                        LinkedList<String> lista = new LinkedList<>();
                        lista.add("if " + exp + ":");
                        func.Funcion.ContadorIndentacion++;
                        lista.addAll(func.Funcion.IndentacionPY(listaInstTrad));
                        func.Funcion.ContadorIndentacion--;
                        lista.addAll((LinkedList<String>)listacierre);
                        RESULT = lista;
                    :}

;



instruccionLlaveC::=  TkLLAVEC
                    {:
                        LinkedList<String> lista = new LinkedList<>();
                        lista.add("");
                        RESULT = lista;

                    :}
                    | TkLLAVEC  TkELSE_R TkLLAVEA   listainstrTraduccion:listaInstTrad   TkLLAVEC
                    {:
                        LinkedList<String> lista = new LinkedList<>();
                        lista.add("else:");
                        func.Funcion.ContadorIndentacion++;
                        lista.addAll(func.Funcion.IndentacionPY(listaInstTrad));
                        func.Funcion.ContadorIndentacion--;
                        RESULT = lista;
                        
                    :}
                    | TkLLAVEC  TkELSE_R TkIF_R TkPARENTESISAbre expresionTraduccion:exp TkPARENTESISCierra   TkLLAVEA   listainstrTraduccion:listaInstTrad3    instruccionLlaveC:listllaveC
                    {:
                        LinkedList<String> lista = new LinkedList<>();
                        lista.add("elif " +exp+" :");
                        func.Funcion.ContadorIndentacion++;
                        lista.addAll(func.Funcion.IndentacionPY(listaInstTrad3));
                        func.Funcion.ContadorIndentacion--;
                        lista.addAll((LinkedList<String>)listllaveC);
                        RESULT = lista;  
                    :}
;
// no jala varios elifs ni luego de un elif un else




expresionRelacional ::= TkMAYORQUE: val {:RESULT = ">";:}
                    | TkMENORQUE: val {:RESULT = "<";:}
                    | TkMAYORIGUAL: val {:RESULT = ">=";:}
                    | TkMENORIGUAL: val {:RESULT = "<=";:}
                    | TkIGUALIGUAL: val {:RESULT = "==";:}
                    | TkIDISTINTO: val {:RESULT = "!=";:}
; 


instruccionWhile::= TkWHILE_R TkPARENTESISAbre expresionTraduccion:exp   TkPARENTESISCierra   TkLLAVEA   listainstrTraduccion:listainst  TkLLAVEC
                    {:
                            LinkedList<String> lista = new LinkedList<>();
                            lista.add("while " + exp + " :");
                            func.Funcion.ContadorIndentacion++;
                            lista.addAll(func.Funcion.IndentacionPY(listainst));
                            func.Funcion.ContadorIndentacion--;
                            RESULT = lista;
                    :}
;



instruccionDowhile::=  TkDO_R TkLLAVEA listainstrTraduccion:listainst  TkLLAVEC TkWHILE_R  TkPARENTESISAbre expresionTraduccion:exp   TkPARENTESISCierra TkPUNTOYCOMA
                    {:
                        LinkedList<String> lista = new LinkedList<>();
                        lista.add("while True:");
                        func.Funcion.ContadorIndentacion++;
                        lista.addAll(func.Funcion.IndentacionPY(listainst));
                        lista.add("if  (" + exp + "):");
                        func.Funcion.ContadorIndentacion++;
                        lista.add("break");
                        func.Funcion.ContadorIndentacion--;
                        func.Funcion.ContadorIndentacion--;
                        RESULT = lista;
                    :}
;


                            //                     int    j          =              1                           ;             j                     <                6    
instruccionFor ::= TkFOR_R TkPARENTESISAbre  tipoDato TkIdentificador:a TkIGUAL expresionTraduccion:b TkPUNTOYCOMA TkIdentificador:c  expresionRelacional:d  expresionTraduccion:e TkPUNTOYCOMA TkIdentificador:f TkIncremento TkPARENTESISCierra TkLLAVEA listainstrTraduccion:listainstr TkLLAVEC
                    {:

                        // b y e son objetos
                        String nuevad = String.valueOf((Object)d);
                        int nuevab = Integer.parseInt((String) (Object) b);
                        int nuevae = Integer.parseInt((String) (Object) e);
                        LinkedList<String> lista = new LinkedList<>();
                        
                        if ( "<=".equals(nuevad)){
                            lista.add("for " + a+ " in range(" + b + ", " + String.valueOf(nuevae+1) + "):");
                        }else if ("<".equals(nuevad)){
                            lista.add("for " + a+ " in range(" + b + ", " + e + "):");
                        }else{
                            lista.add("for " + a+ " in range(" + b + ", " + e + "):");
                        }
                   
                        func.Funcion.ContadorIndentacion++;
                        lista.addAll(func.Funcion.IndentacionPY(listainstr));
                        func.Funcion.ContadorIndentacion--;
                        RESULT = lista;
                    :}
;




declaracionvariable ::= tipoDato TkIdentificador:b TkPUNTOYCOMA 
                    {:
                        LinkedList<String> lista = new LinkedList<>();
                        lista.add(b.toString()+" = None");
                        RESULT = lista;
                    :}
                  | tipoDato TkIdentificador:b TkIGUAL expresionTraduccion:a TkPUNTOYCOMA 
                    {:
                        LinkedList<String> lista = new LinkedList<>();
                        lista.add(b.toString()+" = "+a.toString());
                        RESULT = lista;
                    :}
;


tipoDato::=  TkINT_R: val {:RESULT = val;:} 
            |TkDOUBLE_R: val {:RESULT = val;:}
            |TkCHAR_R: val {:RESULT = val;:}
            |TkBOOL_R: val {:RESULT = val;:}
            |TkSTRING_R: val {:RESULT = val;:}
;


asignacionvariable ::= TkIdentificador: a TkIGUAL  expresionTraduccion:b  TkPUNTOYCOMA 
                        {:
                            LinkedList<String> lista = new LinkedList<>();
                            lista.add(a.toString() + "=" + b.toString());
                            RESULT = lista;
                        :}
;


instrucccionSwitch::= TkSWITCH_R  TkPARENTESISAbre expresionTraduccion:exp  TkPARENTESISCierra TkLLAVEA  instruccionListaCasoss:listass  TkLLAVEC
                          {:
                                LinkedList<String> lista = new LinkedList<>();
                                lista.add("def switch (" + exp + " ) :");
                                func.Funcion.ContadorIndentacion++;
                                lista.add("switcher = {");
                                func.Funcion.ContadorIndentacion++;
                                lista.addAll(func.Funcion.IndentacionPY((LinkedList<String>)listass));
                                lista.add("}");
                                func.Funcion.ContadorIndentacion--;
                                func.Funcion.ContadorIndentacion--;
                                RESULT = lista;
                          :}
                        


;

instruccionListaCasoss::=  instruccionListaCasoss:lista2  instrucListCas :val 
                            {:
                                LinkedList<String> lista = new LinkedList<>();
                                lista.addAll((LinkedList) lista2);
                                lista.addAll((LinkedList) val);
                                RESULT = (LinkedList) lista;
                            :}
                           | instrucListCas : val
                            {:
                                LinkedList<String> lista = new LinkedList<>();
                                lista.addAll((LinkedList)val);
                                RESULT = (LinkedList) lista;
                            :}
;

        
                            
instrucListCas::=  TkCASE_R  expresionTraduccion:exp   TkDOSPUNTOS listainstrTraduccion:listainstr
                           
                          {:    
                                contadorCases++;
                                LinkedList<String> lista = new LinkedList<>();
                                lista.add(exp + " :") ;
                                func.Funcion.ContadorIndentacion++;
                                lista.addAll(func.Funcion.IndentacionPY(listainstr));
                                func.Funcion.ContadorIndentacion--;
                                LinkedList<String> lista2 = new LinkedList<>();
                                lista2.add(",") ;
                                func.Funcion.ContadorIndentacion++;
                                lista.addAll(func.Funcion.IndentacionPY(lista2));
                                func.Funcion.ContadorIndentacion--;
                                RESULT = lista;

                          :}
                         | TkCASE_R  expresionTraduccion:exp   TkDOSPUNTOS listainstrTraduccion:listainstr1 TkBRAKE_R TkPUNTOYCOMA
                          {:    
                                contadorCases++;
                                LinkedList<String> lista = new LinkedList<>();
                                lista.add(exp + " :") ;
                                func.Funcion.ContadorIndentacion++;
                                lista.addAll(func.Funcion.IndentacionPY(listainstr1));
                                func.Funcion.ContadorIndentacion--;
                                LinkedList<String> lista2 = new LinkedList<>();
                                lista2.add(",") ;
                                func.Funcion.ContadorIndentacion++;
                                lista.addAll(func.Funcion.IndentacionPY(lista2));
                                func.Funcion.ContadorIndentacion--;
                                RESULT = lista;

                          :}
                         | TkDEFAULT_R TkDOSPUNTOS listainstrTraduccion:listainstr2
                          {:
                                int conta = Integer.parseInt((String) (Object)contadorCases);
                                LinkedList<String> lista = new LinkedList<>();
                                lista.add(String.valueOf(conta+1) + " :") ;
                                func.Funcion.ContadorIndentacion++;
                                lista.addAll(func.Funcion.IndentacionPY(listainstr2));
                                func.Funcion.ContadorIndentacion--;
                                LinkedList<String> lista2 = new LinkedList<>();
                                lista2.add(",") ;
                                func.Funcion.ContadorIndentacion++;
                                lista.addAll(func.Funcion.IndentacionPY(lista2));
                                func.Funcion.ContadorIndentacion--;
                                RESULT = lista;
                          :}
;