
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package statpy;

import java_cup.runtime.*;
import clases.Erroor;
import func.Funcion;
import traductionPy.indentPy;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\073\000\002\002\004\000\002\002\011\000\002\005" +
    "\004\000\002\005\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\004\000\002\007\005\000\002\007\005\000\002\007" +
    "\005\000\002\007\005\000\002\007\004\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\005\000\002\007\004\000\002\007\005\000\002" +
    "\007\005\000\002\007\003\000\002\007\003\000\002\007" +
    "\005\000\002\007\003\000\002\007\005\000\002\012\011" +
    "\000\002\011\011\000\002\024\003\000\002\024\007\000" +
    "\002\024\013\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\013\011\000\002\015\013\000\002\016\023" +
    "\000\002\017\005\000\002\017\007\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\021\006\000\002\022\011\000\002\023" +
    "\004\000\002\023\003\000\002\025\006\000\002\025\010" +
    "\000\002\025\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\225\000\004\051\004\001\002\000\004\052\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\024\010\001\002\000\004\025\011\001\002\000" +
    "\004\022\012\001\002\000\034\003\035\044\041\045\021" +
    "\046\016\047\015\050\023\053\025\060\034\062\014\063" +
    "\033\064\030\100\017\101\042\001\002\000\044\003\ufffe" +
    "\023\ufffe\044\ufffe\045\ufffe\046\ufffe\047\ufffe\050\ufffe\053" +
    "\ufffe\055\ufffe\056\ufffe\057\ufffe\060\ufffe\062\ufffe\063\ufffe" +
    "\064\ufffe\100\ufffe\101\ufffe\001\002\000\004\024\210\001" +
    "\002\000\004\101\uffcf\001\002\000\004\101\uffd0\001\002" +
    "\000\004\024\167\001\002\000\004\101\162\001\002\000" +
    "\004\101\uffd1\001\002\000\044\003\ufffd\023\ufffd\044\ufffd" +
    "\045\ufffd\046\ufffd\047\ufffd\050\ufffd\053\ufffd\055\ufffd\056" +
    "\ufffd\057\ufffd\060\ufffd\062\ufffd\063\ufffd\064\ufffd\100\ufffd" +
    "\101\ufffd\001\002\000\004\101\uffce\001\002\000\044\003" +
    "\ufff9\023\ufff9\044\ufff9\045\ufff9\046\ufff9\047\ufff9\050\ufff9" +
    "\053\ufff9\055\ufff9\056\ufff9\057\ufff9\060\ufff9\062\ufff9\063" +
    "\ufff9\064\ufff9\100\ufff9\101\ufff9\001\002\000\004\024\140" +
    "\001\002\000\044\003\ufffa\023\ufffa\044\ufffa\045\ufffa\046" +
    "\ufffa\047\ufffa\050\ufffa\053\ufffa\055\ufffa\056\ufffa\057\ufffa" +
    "\060\ufffa\062\ufffa\063\ufffa\064\ufffa\100\ufffa\101\ufffa\001" +
    "\002\000\044\003\ufff7\023\ufff7\044\ufff7\045\ufff7\046\ufff7" +
    "\047\ufff7\050\ufff7\053\ufff7\055\ufff7\056\ufff7\057\ufff7\060" +
    "\ufff7\062\ufff7\063\ufff7\064\ufff7\100\ufff7\101\ufff7\001\002" +
    "\000\004\024\132\001\002\000\044\003\ufffc\023\ufffc\044" +
    "\ufffc\045\ufffc\046\ufffc\047\ufffc\050\ufffc\053\ufffc\055\ufffc" +
    "\056\ufffc\057\ufffc\060\ufffc\062\ufffc\063\ufffc\064\ufffc\100" +
    "\ufffc\101\ufffc\001\002\000\044\003\ufffb\023\ufffb\044\ufffb" +
    "\045\ufffb\046\ufffb\047\ufffb\050\ufffb\053\ufffb\055\ufffb\056" +
    "\ufffb\057\ufffb\060\ufffb\062\ufffb\063\ufffb\064\ufffb\100\ufffb" +
    "\101\ufffb\001\002\000\004\022\122\001\002\000\004\020" +
    "\114\001\002\000\004\016\113\001\002\000\036\003\035" +
    "\023\112\044\041\045\021\046\016\047\015\050\023\053" +
    "\025\060\034\062\014\063\033\064\030\100\017\101\042" +
    "\001\002\000\044\003\ufff8\023\ufff8\044\ufff8\045\ufff8\046" +
    "\ufff8\047\ufff8\050\ufff8\053\ufff8\055\ufff8\056\ufff8\057\ufff8" +
    "\060\ufff8\062\ufff8\063\ufff8\064\ufff8\100\ufff8\101\ufff8\001" +
    "\002\000\044\003\ufff6\023\ufff6\044\ufff6\045\ufff6\046\ufff6" +
    "\047\ufff6\050\ufff6\053\ufff6\055\ufff6\056\ufff6\057\ufff6\060" +
    "\ufff6\062\ufff6\063\ufff6\064\ufff6\100\ufff6\101\ufff6\001\002" +
    "\000\004\101\uffd2\001\002\000\004\015\043\001\002\000" +
    "\024\004\052\005\046\006\047\007\054\013\051\042\053" +
    "\076\050\077\045\101\055\001\002\000\034\010\071\012" +
    "\064\013\065\014\066\016\110\031\062\032\060\033\070" +
    "\034\067\035\074\037\061\040\073\041\063\001\002\000" +
    "\040\010\uffe6\012\uffe6\013\uffe6\014\uffe6\016\uffe6\017\uffe6" +
    "\025\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\037" +
    "\uffe6\040\uffe6\041\uffe6\001\002\000\040\010\uffee\012\uffee" +
    "\013\uffee\014\uffee\016\uffee\017\uffee\025\uffee\031\uffee\032" +
    "\uffee\033\uffee\034\uffee\035\uffee\037\uffee\040\uffee\041\uffee" +
    "\001\002\000\040\010\106\012\uffec\013\uffec\014\uffec\016" +
    "\uffec\017\uffec\025\uffec\031\uffec\032\uffec\033\uffec\034\uffec" +
    "\035\uffec\037\uffec\040\uffec\041\uffec\001\002\000\040\010" +
    "\uffe7\012\uffe7\013\uffe7\014\uffe7\016\uffe7\017\uffe7\025\uffe7" +
    "\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\037\uffe7\040" +
    "\uffe7\041\uffe7\001\002\000\024\004\052\005\046\006\047" +
    "\007\054\013\051\042\053\076\050\077\045\101\055\001" +
    "\002\000\040\010\uffef\012\uffef\013\uffef\014\uffef\016\uffef" +
    "\017\uffef\025\uffef\031\uffef\032\uffef\033\uffef\034\uffef\035" +
    "\uffef\037\uffef\040\uffef\041\uffef\001\002\000\024\004\052" +
    "\005\046\006\047\007\054\013\051\042\053\076\050\077" +
    "\045\101\055\001\002\000\040\010\uffed\012\uffed\013\uffed" +
    "\014\uffed\016\uffed\017\uffed\025\uffed\031\uffed\032\uffed\033" +
    "\uffed\034\uffed\035\uffed\037\uffed\040\uffed\041\uffed\001\002" +
    "\000\040\010\056\012\uffe4\013\uffe4\014\uffe4\016\uffe4\017" +
    "\uffe4\025\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4" +
    "\037\uffe4\040\uffe4\041\uffe4\001\002\000\024\004\052\005" +
    "\046\006\047\007\054\013\051\042\053\076\050\077\045" +
    "\101\055\001\002\000\040\010\uffe3\012\064\013\065\014" +
    "\066\016\uffe3\017\uffe3\025\uffe3\031\uffe3\032\uffe3\033\uffe3" +
    "\034\uffe3\035\uffe3\037\uffe3\040\uffe3\041\uffe3\001\002\000" +
    "\024\004\uffdc\005\uffdc\006\uffdc\007\uffdc\013\uffdc\042\uffdc" +
    "\076\uffdc\077\uffdc\101\uffdc\001\002\000\024\004\uffd8\005" +
    "\uffd8\006\uffd8\007\uffd8\013\uffd8\042\uffd8\076\uffd8\077\uffd8" +
    "\101\uffd8\001\002\000\024\004\uffdd\005\uffdd\006\uffdd\007" +
    "\uffdd\013\uffdd\042\uffdd\076\uffdd\077\uffdd\101\uffdd\001\002" +
    "\000\024\004\052\005\046\006\047\007\054\013\051\042" +
    "\053\076\050\077\045\101\055\001\002\000\024\004\052" +
    "\005\046\006\047\007\054\013\051\042\053\076\050\077" +
    "\045\101\055\001\002\000\024\004\052\005\046\006\047" +
    "\007\054\013\051\042\053\076\050\077\045\101\055\001" +
    "\002\000\024\004\052\005\046\006\047\007\054\013\051" +
    "\042\053\076\050\077\045\101\055\001\002\000\024\004" +
    "\uffda\005\uffda\006\uffda\007\uffda\013\uffda\042\uffda\076\uffda" +
    "\077\uffda\101\uffda\001\002\000\024\004\uffdb\005\uffdb\006" +
    "\uffdb\007\uffdb\013\uffdb\042\uffdb\076\uffdb\077\uffdb\101\uffdb" +
    "\001\002\000\024\004\052\005\046\006\047\007\054\013" +
    "\051\042\053\076\050\077\045\101\055\001\002\000\024" +
    "\004\052\005\046\006\047\007\054\013\051\042\053\076" +
    "\050\077\045\101\055\001\002\000\024\004\052\005\046" +
    "\006\047\007\054\013\051\042\053\076\050\077\045\101" +
    "\055\001\002\000\024\004\uffd9\005\uffd9\006\uffd9\007\uffd9" +
    "\013\uffd9\042\uffd9\076\uffd9\077\uffd9\101\uffd9\001\002\000" +
    "\040\010\071\012\064\013\065\014\066\016\uffe9\017\uffe9" +
    "\025\uffe9\031\062\032\060\033\070\034\067\035\074\037" +
    "\061\040\uffe9\041\uffe9\001\002\000\040\010\071\012\064" +
    "\013\065\014\066\016\uffeb\017\uffeb\025\uffeb\031\062\032" +
    "\060\033\070\034\067\035\074\037\061\040\073\041\063" +
    "\001\002\000\040\010\ufff4\012\064\013\065\014\066\016" +
    "\ufff4\017\ufff4\025\ufff4\031\ufff4\032\ufff4\033\ufff4\034\ufff4" +
    "\035\ufff4\037\ufff4\040\ufff4\041\ufff4\001\002\000\040\010" +
    "\ufff1\012\ufff1\013\065\014\ufff1\016\ufff1\017\ufff1\025\ufff1" +
    "\031\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1\037\ufff1\040" +
    "\ufff1\041\ufff1\001\002\000\040\010\ufff3\012\ufff3\013\065" +
    "\014\ufff3\016\ufff3\017\ufff3\025\ufff3\031\ufff3\032\ufff3\033" +
    "\ufff3\034\ufff3\035\ufff3\037\ufff3\040\ufff3\041\ufff3\001\002" +
    "\000\040\010\ufff2\012\ufff2\013\065\014\ufff2\016\ufff2\017" +
    "\ufff2\025\ufff2\031\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2" +
    "\037\ufff2\040\ufff2\041\ufff2\001\002\000\040\010\071\012" +
    "\064\013\065\014\066\016\uffe8\017\uffe8\025\uffe8\031\062" +
    "\032\060\033\070\034\067\035\074\037\061\040\073\041" +
    "\uffe8\001\002\000\040\010\071\012\064\013\065\014\066" +
    "\016\uffea\017\uffea\025\uffea\031\062\032\060\033\070\034" +
    "\067\035\074\037\061\040\uffea\041\uffea\001\002\000\040" +
    "\010\ufff0\012\ufff0\013\065\014\ufff0\016\ufff0\017\ufff0\025" +
    "\ufff0\031\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0\037\ufff0" +
    "\040\ufff0\041\ufff0\001\002\000\024\004\052\005\046\006" +
    "\047\007\054\013\051\042\053\076\050\077\045\101\055" +
    "\001\002\000\040\010\uffe5\012\064\013\065\014\066\016" +
    "\uffe5\017\uffe5\025\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5" +
    "\035\uffe5\037\uffe5\040\uffe5\041\uffe5\001\002\000\044\003" +
    "\uffcd\023\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd" +
    "\053\uffcd\055\uffcd\056\uffcd\057\uffcd\060\uffcd\062\uffcd\063" +
    "\uffcd\064\uffcd\100\uffcd\101\uffcd\001\002\000\044\003\uffff" +
    "\023\uffff\044\uffff\045\uffff\046\uffff\047\uffff\050\uffff\053" +
    "\uffff\055\uffff\056\uffff\057\uffff\060\uffff\062\uffff\063\uffff" +
    "\064\uffff\100\uffff\101\uffff\001\002\000\004\002\000\001" +
    "\002\000\044\003\ufff5\023\ufff5\044\ufff5\045\ufff5\046\ufff5" +
    "\047\ufff5\050\ufff5\053\ufff5\055\ufff5\056\ufff5\057\ufff5\060" +
    "\ufff5\062\ufff5\063\ufff5\064\ufff5\100\ufff5\101\ufff5\001\002" +
    "\000\004\061\115\001\002\000\004\024\116\001\002\000" +
    "\024\004\052\005\046\006\047\007\054\013\051\042\053" +
    "\076\050\077\045\101\055\001\002\000\034\010\071\012" +
    "\064\013\065\014\066\025\120\031\062\032\060\033\070" +
    "\034\067\035\074\037\061\040\073\041\063\001\002\000" +
    "\004\016\121\001\002\000\044\003\uffe2\023\uffe2\044\uffe2" +
    "\045\uffe2\046\uffe2\047\uffe2\050\uffe2\053\uffe2\055\uffe2\056" +
    "\uffe2\057\uffe2\060\uffe2\062\uffe2\063\uffe2\064\uffe2\100\uffe2" +
    "\101\uffe2\001\002\000\034\003\035\044\041\045\021\046" +
    "\016\047\015\050\023\053\025\060\034\062\014\063\033" +
    "\064\030\100\017\101\042\001\002\000\036\003\035\023" +
    "\124\044\041\045\021\046\016\047\015\050\023\053\025" +
    "\060\034\062\014\063\033\064\030\100\017\101\042\001" +
    "\002\000\004\064\125\001\002\000\004\024\126\001\002" +
    "\000\024\004\052\005\046\006\047\007\054\013\051\042" +
    "\053\076\050\077\045\101\055\001\002\000\034\010\071" +
    "\012\064\013\065\014\066\025\130\031\062\032\060\033" +
    "\070\034\067\035\074\037\061\040\073\041\063\001\002" +
    "\000\004\016\131\001\002\000\044\003\uffd6\023\uffd6\044" +
    "\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6\053\uffd6\055\uffd6" +
    "\056\uffd6\057\uffd6\060\uffd6\062\uffd6\063\uffd6\064\uffd6\100" +
    "\uffd6\101\uffd6\001\002\000\024\004\052\005\046\006\047" +
    "\007\054\013\051\042\053\076\050\077\045\101\055\001" +
    "\002\000\034\010\071\012\064\013\065\014\066\025\134" +
    "\031\062\032\060\033\070\034\067\035\074\037\061\040" +
    "\073\041\063\001\002\000\004\022\135\001\002\000\034" +
    "\003\035\044\041\045\021\046\016\047\015\050\023\053" +
    "\025\060\034\062\014\063\033\064\030\100\017\101\042" +
    "\001\002\000\036\003\035\023\137\044\041\045\021\046" +
    "\016\047\015\050\023\053\025\060\034\062\014\063\033" +
    "\064\030\100\017\101\042\001\002\000\044\003\uffd7\023" +
    "\uffd7\044\uffd7\045\uffd7\046\uffd7\047\uffd7\050\uffd7\053\uffd7" +
    "\055\uffd7\056\uffd7\057\uffd7\060\uffd7\062\uffd7\063\uffd7\064" +
    "\uffd7\100\uffd7\101\uffd7\001\002\000\024\004\052\005\046" +
    "\006\047\007\054\013\051\042\053\076\050\077\045\101" +
    "\055\001\002\000\034\010\071\012\064\013\065\014\066" +
    "\025\142\031\062\032\060\033\070\034\067\035\074\037" +
    "\061\040\073\041\063\001\002\000\004\022\143\001\002" +
    "\000\034\003\035\044\041\045\021\046\016\047\015\050" +
    "\023\053\025\060\034\062\014\063\033\064\030\100\017" +
    "\101\042\001\002\000\036\003\035\023\145\044\041\045" +
    "\021\046\016\047\015\050\023\053\025\060\034\062\014" +
    "\063\033\064\030\100\017\101\042\001\002\000\046\003" +
    "\uffe0\023\uffe0\044\uffe0\045\uffe0\046\uffe0\047\uffe0\050\uffe0" +
    "\053\uffe0\054\147\055\uffe0\056\uffe0\057\uffe0\060\uffe0\062" +
    "\uffe0\063\uffe0\064\uffe0\100\uffe0\101\uffe0\001\002\000\044" +
    "\003\uffe1\023\uffe1\044\uffe1\045\uffe1\046\uffe1\047\uffe1\050" +
    "\uffe1\053\uffe1\055\uffe1\056\uffe1\057\uffe1\060\uffe1\062\uffe1" +
    "\063\uffe1\064\uffe1\100\uffe1\101\uffe1\001\002\000\006\022" +
    "\151\053\150\001\002\000\004\024\154\001\002\000\034" +
    "\003\035\044\041\045\021\046\016\047\015\050\023\053" +
    "\025\060\034\062\014\063\033\064\030\100\017\101\042" +
    "\001\002\000\036\003\035\023\153\044\041\045\021\046" +
    "\016\047\015\050\023\053\025\060\034\062\014\063\033" +
    "\064\030\100\017\101\042\001\002\000\044\003\uffdf\023" +
    "\uffdf\044\uffdf\045\uffdf\046\uffdf\047\uffdf\050\uffdf\053\uffdf" +
    "\055\uffdf\056\uffdf\057\uffdf\060\uffdf\062\uffdf\063\uffdf\064" +
    "\uffdf\100\uffdf\101\uffdf\001\002\000\024\004\052\005\046" +
    "\006\047\007\054\013\051\042\053\076\050\077\045\101" +
    "\055\001\002\000\034\010\071\012\064\013\065\014\066" +
    "\025\156\031\062\032\060\033\070\034\067\035\074\037" +
    "\061\040\073\041\063\001\002\000\004\022\157\001\002" +
    "\000\034\003\035\044\041\045\021\046\016\047\015\050" +
    "\023\053\025\060\034\062\014\063\033\064\030\100\017" +
    "\101\042\001\002\000\036\003\035\023\145\044\041\045" +
    "\021\046\016\047\015\050\023\053\025\060\034\062\014" +
    "\063\033\064\030\100\017\101\042\001\002\000\044\003" +
    "\uffde\023\uffde\044\uffde\045\uffde\046\uffde\047\uffde\050\uffde" +
    "\053\uffde\055\uffde\056\uffde\057\uffde\060\uffde\062\uffde\063" +
    "\uffde\064\uffde\100\uffde\101\uffde\001\002\000\006\015\163" +
    "\016\164\001\002\000\024\004\052\005\046\006\047\007" +
    "\054\013\051\042\053\076\050\077\045\101\055\001\002" +
    "\000\044\003\uffd4\023\uffd4\044\uffd4\045\uffd4\046\uffd4\047" +
    "\uffd4\050\uffd4\053\uffd4\055\uffd4\056\uffd4\057\uffd4\060\uffd4" +
    "\062\uffd4\063\uffd4\064\uffd4\100\uffd4\101\uffd4\001\002\000" +
    "\034\010\071\012\064\013\065\014\066\016\166\031\062" +
    "\032\060\033\070\034\067\035\074\037\061\040\073\041" +
    "\063\001\002\000\044\003\uffd3\023\uffd3\044\uffd3\045\uffd3" +
    "\046\uffd3\047\uffd3\050\uffd3\053\uffd3\055\uffd3\056\uffd3\057" +
    "\uffd3\060\uffd3\062\uffd3\063\uffd3\064\uffd3\100\uffd3\101\uffd3" +
    "\001\002\000\024\004\052\005\046\006\047\007\054\013" +
    "\051\042\053\076\050\077\045\101\055\001\002\000\034" +
    "\010\071\012\064\013\065\014\066\025\171\031\062\032" +
    "\060\033\070\034\067\035\074\037\061\040\073\041\063" +
    "\001\002\000\004\022\172\001\002\000\006\055\173\057" +
    "\175\001\002\000\024\004\052\005\046\006\047\007\054" +
    "\013\051\042\053\076\050\077\045\101\055\001\002\000" +
    "\010\023\uffca\055\uffca\057\uffca\001\002\000\004\017\201" +
    "\001\002\000\010\023\177\055\173\057\175\001\002\000" +
    "\044\003\uffcc\023\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc" +
    "\050\uffcc\053\uffcc\055\uffcc\056\uffcc\057\uffcc\060\uffcc\062" +
    "\uffcc\063\uffcc\064\uffcc\100\uffcc\101\uffcc\001\002\000\010" +
    "\023\uffcb\055\uffcb\057\uffcb\001\002\000\034\003\035\044" +
    "\041\045\021\046\016\047\015\050\023\053\025\060\034" +
    "\062\014\063\033\064\030\100\017\101\042\001\002\000" +
    "\042\003\035\023\uffc7\044\041\045\021\046\016\047\015" +
    "\050\023\053\025\055\uffc7\057\uffc7\060\034\062\014\063" +
    "\033\064\030\100\017\101\042\001\002\000\034\010\071" +
    "\012\064\013\065\014\066\017\204\031\062\032\060\033" +
    "\070\034\067\035\074\037\061\040\073\041\063\001\002" +
    "\000\034\003\035\044\041\045\021\046\016\047\015\050" +
    "\023\053\025\060\034\062\014\063\033\064\030\100\017" +
    "\101\042\001\002\000\044\003\035\023\uffc9\044\041\045" +
    "\021\046\016\047\015\050\023\053\025\055\uffc9\056\206" +
    "\057\uffc9\060\034\062\014\063\033\064\030\100\017\101" +
    "\042\001\002\000\004\016\207\001\002\000\010\023\uffc8" +
    "\055\uffc8\057\uffc8\001\002\000\014\044\041\045\021\046" +
    "\016\047\015\050\023\001\002\000\004\101\212\001\002" +
    "\000\004\015\213\001\002\000\024\004\052\005\046\006" +
    "\047\007\054\013\051\042\053\076\050\077\045\101\055" +
    "\001\002\000\034\010\071\012\064\013\065\014\066\016" +
    "\215\031\062\032\060\033\070\034\067\035\074\037\061" +
    "\040\073\041\063\001\002\000\004\101\216\001\002\000" +
    "\016\031\062\032\060\033\070\034\067\035\074\037\061" +
    "\001\002\000\024\004\052\005\046\006\047\007\054\013" +
    "\051\042\053\076\050\077\045\101\055\001\002\000\034" +
    "\010\071\012\064\013\065\014\066\016\221\031\062\032" +
    "\060\033\070\034\067\035\074\037\061\040\073\041\063" +
    "\001\002\000\004\101\222\001\002\000\004\043\223\001" +
    "\002\000\004\025\224\001\002\000\004\022\225\001\002" +
    "\000\034\003\035\044\041\045\021\046\016\047\015\050" +
    "\023\053\025\060\034\062\014\063\033\064\030\100\017" +
    "\101\042\001\002\000\036\003\035\023\227\044\041\045" +
    "\021\046\016\047\015\050\023\053\025\060\034\062\014" +
    "\063\033\064\030\100\017\101\042\001\002\000\044\003" +
    "\uffd5\023\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5" +
    "\053\uffd5\055\uffd5\056\uffd5\057\uffd5\060\uffd5\062\uffd5\063" +
    "\uffd5\064\uffd5\100\uffd5\101\uffd5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\225\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\003\012\005\035\011" +
    "\030\012\021\013\031\015\025\016\026\017\023\020\017" +
    "\021\036\022\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\003\110\011\030\012\021\013" +
    "\031\015\025\016\026\017\023\020\017\021\036\022\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\043\001\001\000\004" +
    "\014\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\104\001\001" +
    "\000\002\001\001\000\004\007\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\056\001\001\000\004" +
    "\014\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\102\001\001\000\004\007\101" +
    "\001\001\000\004\007\100\001\001\000\004\007\077\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\076" +
    "\001\001\000\004\007\075\001\001\000\004\007\074\001" +
    "\001\000\002\001\001\000\004\014\071\001\001\000\004" +
    "\014\071\001\001\000\004\014\071\001\001\000\004\014" +
    "\071\001\001\000\004\014\071\001\001\000\004\014\071" +
    "\001\001\000\004\014\071\001\001\000\004\014\071\001" +
    "\001\000\004\014\071\001\001\000\004\007\106\001\001" +
    "\000\004\014\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\116\001\001\000\004\014" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\003\012\005\122\011\030\012\021\013\031\015\025\016" +
    "\026\017\023\020\017\021\036\022\037\001\001\000\026" +
    "\003\110\011\030\012\021\013\031\015\025\016\026\017" +
    "\023\020\017\021\036\022\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\126\001\001\000\004\014" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\132\001\001\000\004\014\071\001\001\000\002\001" +
    "\001\000\030\003\012\005\135\011\030\012\021\013\031" +
    "\015\025\016\026\017\023\020\017\021\036\022\037\001" +
    "\001\000\026\003\110\011\030\012\021\013\031\015\025" +
    "\016\026\017\023\020\017\021\036\022\037\001\001\000" +
    "\002\001\001\000\004\007\140\001\001\000\004\014\071" +
    "\001\001\000\002\001\001\000\030\003\012\005\143\011" +
    "\030\012\021\013\031\015\025\016\026\017\023\020\017" +
    "\021\036\022\037\001\001\000\030\003\110\011\030\012" +
    "\021\013\031\015\025\016\026\017\023\020\017\021\036" +
    "\022\037\024\145\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\003\012" +
    "\005\151\011\030\012\021\013\031\015\025\016\026\017" +
    "\023\020\017\021\036\022\037\001\001\000\026\003\110" +
    "\011\030\012\021\013\031\015\025\016\026\017\023\020" +
    "\017\021\036\022\037\001\001\000\002\001\001\000\004" +
    "\007\154\001\001\000\004\014\071\001\001\000\002\001" +
    "\001\000\030\003\012\005\157\011\030\012\021\013\031" +
    "\015\025\016\026\017\023\020\017\021\036\022\037\001" +
    "\001\000\030\003\110\011\030\012\021\013\031\015\025" +
    "\016\026\017\023\020\017\021\036\022\037\024\160\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\164" +
    "\001\001\000\002\001\001\000\004\014\071\001\001\000" +
    "\002\001\001\000\004\007\167\001\001\000\004\014\071" +
    "\001\001\000\002\001\001\000\006\023\175\025\173\001" +
    "\001\000\004\007\202\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\177\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\003\012\005\201\011\030\012\021" +
    "\013\031\015\025\016\026\017\023\020\017\021\036\022" +
    "\037\001\001\000\026\003\110\011\030\012\021\013\031" +
    "\015\025\016\026\017\023\020\017\021\036\022\037\001" +
    "\001\000\004\014\071\001\001\000\030\003\012\005\204" +
    "\011\030\012\021\013\031\015\025\016\026\017\023\020" +
    "\017\021\036\022\037\001\001\000\026\003\110\011\030" +
    "\012\021\013\031\015\025\016\026\017\023\020\017\021" +
    "\036\022\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\210\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\213\001\001\000\004\014\071\001\001" +
    "\000\002\001\001\000\004\014\216\001\001\000\004\007" +
    "\217\001\001\000\004\014\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\003\012\005\225\011\030\012\021\013\031\015\025" +
    "\016\026\017\023\020\017\021\036\022\037\001\001\000" +
    "\026\003\110\011\030\012\021\013\031\015\025\016\026" +
    "\017\023\020\017\021\036\022\037\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static String resultado = ""; 
    public static int contadorCases =0;

    public void syntax_error(Symbol s)
    {       
            Erroor errorsito = new Erroor("Sintactico", s.value.toString() ,"No es valido en este lenguaje sintact", s.right, s.left);
            Funcion.ErrorList.add(errorsito);
            System.err.println("Error Sintactico: "+ s.value.toString() + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );        
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {       
            Erroor errorsito = new Erroor("Sintactico", s.value.toString() ,"No es valido en este lenguaje sintact", s.right, s.left);
            Funcion.ErrorList.add(errorsito);
            System.err.println("Error Sintactico: "+ s.value.toString() + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

  
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= TkVOID_R TkMAIN_R TkPARENTESISAbre TkPARENTESISCierra TkLLAVEA listainstrTraduccion TkLLAVEC 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList lista = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		   
                            
                            LinkedList<String> listaN = new LinkedList<>();
                            listaN.add("def main( ):");
                            func.Funcion.ContadorIndentacion++;
                            listaN.addAll(func.Funcion.IndentacionPY(lista));
                            func.Funcion.ContadorIndentacion--;
                            listaN.add("if__name__ = \"__main__\":\n\tmain()");
                            func.Funcion.ListaTraducccionPy = listaN;
                                
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // listainstrTraduccion ::= listainstrTraduccion instruccionTraduccion 
            {
              LinkedList RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList lista = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                lista.addAll((LinkedList) val);
                                RESULT = (LinkedList) lista;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listainstrTraduccion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // listainstrTraduccion ::= instruccionTraduccion 
            {
              LinkedList RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                LinkedList<String> lista = new LinkedList<>();
                                lista.addAll((LinkedList)val);
                                RESULT = (LinkedList) lista;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listainstrTraduccion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccionTraduccion ::= instruccionConsoleWr 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionTraduccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccionTraduccion ::= instruccionIF 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionTraduccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccionTraduccion ::= instruccionWhile 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionTraduccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccionTraduccion ::= instruccionDowhile 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionTraduccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccionTraduccion ::= declaracionvariable 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionTraduccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccionTraduccion ::= asignacionvariable 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionTraduccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccionTraduccion ::= instruccionFor 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionTraduccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccionTraduccion ::= instrucccionSwitch 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionTraduccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccionTraduccion ::= error TkPUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionTraduccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expresionTraduccion ::= expresionTraduccion TkSUMA expresionTraduccion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT =  a.toString()+"+"+b.toString() ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionTraduccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expresionTraduccion ::= expresionTraduccion TkRESTA expresionTraduccion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.toString()+"-"+b.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionTraduccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expresionTraduccion ::= expresionTraduccion TkMULTIPLICACION expresionTraduccion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a.toString()+"*"+b.toString() ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionTraduccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expresionTraduccion ::= expresionTraduccion TkDIVISION expresionTraduccion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a.toString()+"/"+b.toString() ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionTraduccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expresionTraduccion ::= TkRESTA expresionTraduccion 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = "-"+b.toString() ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionTraduccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expresionTraduccion ::= TkENTERO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionTraduccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expresionTraduccion ::= TkDECIMAL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionTraduccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expresionTraduccion ::= TkErChar 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionTraduccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresionTraduccion ::= TkCADENA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionTraduccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expresionTraduccion ::= expresionTraduccion expresionRelacional expresionTraduccion 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = b.toString()+a.toString()+c.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionTraduccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expresionTraduccion ::= TkNOT expresionTraduccion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT  = " not "+a.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionTraduccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expresionTraduccion ::= expresionTraduccion TkAND expresionTraduccion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT  = a.toString()+" and "+b.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionTraduccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expresionTraduccion ::= expresionTraduccion TkOR expresionTraduccion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT  = a.toString()+" or "+b.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionTraduccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expresionTraduccion ::= TkTrue 
            {
              Object RESULT =null;
		RESULT = " True ";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionTraduccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expresionTraduccion ::= TkFalse 
            {
              Object RESULT =null;
		RESULT = " False ";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionTraduccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expresionTraduccion ::= TkCADENA TkSUMA expresionTraduccion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a.toString()+" , "+b.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionTraduccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expresionTraduccion ::= TkIdentificador 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionTraduccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expresionTraduccion ::= TkIdentificador TkSUMA expresionTraduccion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a.toString()+" + "+b.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionTraduccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // instruccionConsoleWr ::= TkCONSOLE_R TkPUNTO TkWRITE_R TkPARENTESISAbre expresionTraduccion TkPARENTESISCierra TkPUNTOYCOMA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                            LinkedList<String> lista = new LinkedList<>();
                            lista.add("print("+val+")");
                            RESULT = lista;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionConsoleWr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // instruccionIF ::= TkIF_R TkPARENTESISAbre expresionTraduccion TkPARENTESISCierra TkLLAVEA listainstrTraduccion instruccionLlaveC 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int listaInstTradleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaInstTradright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList listaInstTrad = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int listacierreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listacierreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object listacierre = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        LinkedList<String> lista = new LinkedList<>();
                        lista.add("if " + exp + ":");
                        func.Funcion.ContadorIndentacion++;
                        lista.addAll(func.Funcion.IndentacionPY(listaInstTrad));
                        func.Funcion.ContadorIndentacion--;
                        lista.addAll((LinkedList<String>)listacierre);
                        RESULT = lista;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionIF",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // instruccionLlaveC ::= TkLLAVEC 
            {
              Object RESULT =null;
		
                        LinkedList<String> lista = new LinkedList<>();
                        lista.add("");
                        RESULT = lista;

                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionLlaveC",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // instruccionLlaveC ::= TkLLAVEC TkELSE_R TkLLAVEA listainstrTraduccion TkLLAVEC 
            {
              Object RESULT =null;
		int listaInstTradleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaInstTradright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList listaInstTrad = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        LinkedList<String> lista = new LinkedList<>();
                        lista.add("else:");
                        func.Funcion.ContadorIndentacion++;
                        lista.addAll(func.Funcion.IndentacionPY(listaInstTrad));
                        func.Funcion.ContadorIndentacion--;
                        RESULT = lista;
                        
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionLlaveC",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // instruccionLlaveC ::= TkLLAVEC TkELSE_R TkIF_R TkPARENTESISAbre expresionTraduccion TkPARENTESISCierra TkLLAVEA listainstrTraduccion instruccionLlaveC 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int listaInstTrad3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaInstTrad3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList listaInstTrad3 = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int listllaveCleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listllaveCright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object listllaveC = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        LinkedList<String> lista = new LinkedList<>();
                        lista.add("elif " +exp+" :");
                        func.Funcion.ContadorIndentacion++;
                        lista.addAll(func.Funcion.IndentacionPY(listaInstTrad3));
                        func.Funcion.ContadorIndentacion--;
                        lista.addAll((LinkedList<String>)listllaveC);
                        RESULT = lista;  
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionLlaveC",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresionRelacional ::= TkMAYORQUE 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ">";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresionRelacional ::= TkMENORQUE 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = "<";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresionRelacional ::= TkMAYORIGUAL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ">=";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresionRelacional ::= TkMENORIGUAL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = "<=";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresionRelacional ::= TkIGUALIGUAL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = "==";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresionRelacional ::= TkIDISTINTO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = "!=";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instruccionWhile ::= TkWHILE_R TkPARENTESISAbre expresionTraduccion TkPARENTESISCierra TkLLAVEA listainstrTraduccion TkLLAVEC 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int listainstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listainstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList listainst = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                            LinkedList<String> lista = new LinkedList<>();
                            lista.add("while " + exp + " :");
                            func.Funcion.ContadorIndentacion++;
                            lista.addAll(func.Funcion.IndentacionPY(listainst));
                            func.Funcion.ContadorIndentacion--;
                            RESULT = lista;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionWhile",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // instruccionDowhile ::= TkDO_R TkLLAVEA listainstrTraduccion TkLLAVEC TkWHILE_R TkPARENTESISAbre expresionTraduccion TkPARENTESISCierra TkPUNTOYCOMA 
            {
              Object RESULT =null;
		int listainstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int listainstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		LinkedList listainst = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                        LinkedList<String> lista = new LinkedList<>();
                        lista.add("while True:");
                        func.Funcion.ContadorIndentacion++;
                        lista.addAll(func.Funcion.IndentacionPY(listainst));
                        lista.add("if  (" + exp + "):");
                        func.Funcion.ContadorIndentacion++;
                        lista.add("break");
                        func.Funcion.ContadorIndentacion--;
                        func.Funcion.ContadorIndentacion--;
                        RESULT = lista;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionDowhile",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // instruccionFor ::= TkFOR_R TkPARENTESISAbre tipoDato TkIdentificador TkIGUAL expresionTraduccion TkPUNTOYCOMA TkIdentificador expresionRelacional expresionTraduccion TkPUNTOYCOMA TkIdentificador TkIncremento TkPARENTESISCierra TkLLAVEA listainstrTraduccion TkLLAVEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int listainstrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listainstrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList listainstr = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		

                        // b y e son objetos
                        String nuevad = String.valueOf((Object)d);
                        int nuevab = Integer.parseInt((String) (Object) b);
                        int nuevae = Integer.parseInt((String) (Object) e);
                        LinkedList<String> lista = new LinkedList<>();
                        
                        if ( "<=".equals(nuevad)){
                            lista.add("for " + a+ " in range(" + b + ", " + String.valueOf(nuevae+1) + "):");
                        }else if ("<".equals(nuevad)){
                            lista.add("for " + a+ " in range(" + b + ", " + e + "):");
                        }else{
                            lista.add("for " + a+ " in range(" + b + ", " + e + "):");
                        }
                   
                        func.Funcion.ContadorIndentacion++;
                        lista.addAll(func.Funcion.IndentacionPY(listainstr));
                        func.Funcion.ContadorIndentacion--;
                        RESULT = lista;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionFor",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // declaracionvariable ::= tipoDato TkIdentificador TkPUNTOYCOMA 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        LinkedList<String> lista = new LinkedList<>();
                        lista.add(b.toString()+" = None");
                        RESULT = lista;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionvariable",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // declaracionvariable ::= tipoDato TkIdentificador TkIGUAL expresionTraduccion TkPUNTOYCOMA 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        LinkedList<String> lista = new LinkedList<>();
                        lista.add(b.toString()+" = "+a.toString());
                        RESULT = lista;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionvariable",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // tipoDato ::= TkINT_R 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoDato",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // tipoDato ::= TkDOUBLE_R 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoDato",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // tipoDato ::= TkCHAR_R 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoDato",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // tipoDato ::= TkBOOL_R 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoDato",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // tipoDato ::= TkSTRING_R 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoDato",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // asignacionvariable ::= TkIdentificador TkIGUAL expresionTraduccion TkPUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                            LinkedList<String> lista = new LinkedList<>();
                            lista.add(a.toString() + "=" + b.toString());
                            RESULT = lista;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacionvariable",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // instrucccionSwitch ::= TkSWITCH_R TkPARENTESISAbre expresionTraduccion TkPARENTESISCierra TkLLAVEA instruccionListaCasoss TkLLAVEC 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int listassleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listassright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object listass = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                LinkedList<String> lista = new LinkedList<>();
                                lista.add("def switch (" + exp + " ) :");
                                func.Funcion.ContadorIndentacion++;
                                lista.add("switcher = {");
                                func.Funcion.ContadorIndentacion++;
                                lista.addAll(func.Funcion.IndentacionPY((LinkedList<String>)listass));
                                lista.add("}");
                                func.Funcion.ContadorIndentacion--;
                                func.Funcion.ContadorIndentacion--;
                                RESULT = lista;
                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucccionSwitch",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // instruccionListaCasoss ::= instruccionListaCasoss instrucListCas 
            {
              Object RESULT =null;
		int lista2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lista2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lista2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                LinkedList<String> lista = new LinkedList<>();
                                lista.addAll((LinkedList) lista2);
                                lista.addAll((LinkedList) val);
                                RESULT = (LinkedList) lista;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionListaCasoss",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // instruccionListaCasoss ::= instrucListCas 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                LinkedList<String> lista = new LinkedList<>();
                                lista.addAll((LinkedList)val);
                                RESULT = (LinkedList) lista;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionListaCasoss",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // instrucListCas ::= TkCASE_R expresionTraduccion TkDOSPUNTOS listainstrTraduccion 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listainstrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listainstrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList listainstr = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		    
                                contadorCases++;
                                LinkedList<String> lista = new LinkedList<>();
                                lista.add(exp + " :") ;
                                func.Funcion.ContadorIndentacion++;
                                lista.addAll(func.Funcion.IndentacionPY(listainstr));
                                func.Funcion.ContadorIndentacion--;
                                LinkedList<String> lista2 = new LinkedList<>();
                                lista2.add(",") ;
                                func.Funcion.ContadorIndentacion++;
                                lista.addAll(func.Funcion.IndentacionPY(lista2));
                                func.Funcion.ContadorIndentacion--;
                                RESULT = lista;

                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucListCas",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // instrucListCas ::= TkCASE_R expresionTraduccion TkDOSPUNTOS listainstrTraduccion TkBRAKE_R TkPUNTOYCOMA 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int listainstr1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listainstr1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList listainstr1 = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		    
                                contadorCases++;
                                LinkedList<String> lista = new LinkedList<>();
                                lista.add(exp + " :") ;
                                func.Funcion.ContadorIndentacion++;
                                lista.addAll(func.Funcion.IndentacionPY(listainstr1));
                                func.Funcion.ContadorIndentacion--;
                                LinkedList<String> lista2 = new LinkedList<>();
                                lista2.add(",") ;
                                func.Funcion.ContadorIndentacion++;
                                lista.addAll(func.Funcion.IndentacionPY(lista2));
                                func.Funcion.ContadorIndentacion--;
                                RESULT = lista;

                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucListCas",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // instrucListCas ::= TkDEFAULT_R TkDOSPUNTOS listainstrTraduccion 
            {
              Object RESULT =null;
		int listainstr2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listainstr2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList listainstr2 = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                int conta = Integer.parseInt((String) (Object)contadorCases);
                                LinkedList<String> lista = new LinkedList<>();
                                lista.add(String.valueOf(conta+1) + " :") ;
                                func.Funcion.ContadorIndentacion++;
                                lista.addAll(func.Funcion.IndentacionPY(listainstr2));
                                func.Funcion.ContadorIndentacion--;
                                LinkedList<String> lista2 = new LinkedList<>();
                                lista2.add(",") ;
                                func.Funcion.ContadorIndentacion++;
                                lista.addAll(func.Funcion.IndentacionPY(lista2));
                                func.Funcion.ContadorIndentacion--;
                                RESULT = lista;
                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucListCas",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
