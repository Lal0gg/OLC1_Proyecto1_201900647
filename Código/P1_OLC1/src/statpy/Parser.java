
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package statpy;

import java_cup.runtime.*;
import clases.Erroor;
import func.Funcion;
import traductionPy.indentPy;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\063\000\002\002\004\000\002\002\011\000\002\005" +
    "\004\000\002\005\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\004\000\002\007\005\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\004\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\005\000\002\007\004\000" +
    "\002\007\005\000\002\007\005\000\002\007\003\000\002" +
    "\007\003\000\002\007\005\000\002\007\003\000\002\007" +
    "\005\000\002\012\011\000\002\011\011\000\002\011\015" +
    "\000\002\011\027\000\002\011\024\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\013\011\000\002\015" +
    "\013\000\002\016\010\000\002\017\005\000\002\017\007" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\021\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\172\000\004\051\004\001\002\000\004\052\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\024\010\001\002\000\004\025\011\001\002\000" +
    "\004\022\012\001\002\000\030\003\032\044\035\045\017" +
    "\046\015\047\014\050\020\053\023\060\031\063\030\064" +
    "\025\102\036\001\002\000\032\003\ufffe\023\ufffe\044\ufffe" +
    "\045\ufffe\046\ufffe\047\ufffe\050\ufffe\053\ufffe\060\ufffe\063" +
    "\ufffe\064\ufffe\102\ufffe\001\002\000\004\102\uffd1\001\002" +
    "\000\004\102\uffd2\001\002\000\004\102\170\001\002\000" +
    "\004\102\uffd3\001\002\000\004\102\uffd0\001\002\000\032" +
    "\003\ufffd\023\ufffd\044\ufffd\045\ufffd\046\ufffd\047\ufffd\050" +
    "\ufffd\053\ufffd\060\ufffd\063\ufffd\064\ufffd\102\ufffd\001\002" +
    "\000\032\003\ufff9\023\ufff9\044\ufff9\045\ufff9\046\ufff9\047" +
    "\ufff9\050\ufff9\053\ufff9\060\ufff9\063\ufff9\064\ufff9\102\ufff9" +
    "\001\002\000\004\024\134\001\002\000\032\003\ufffa\023" +
    "\ufffa\044\ufffa\045\ufffa\046\ufffa\047\ufffa\050\ufffa\053\ufffa" +
    "\060\ufffa\063\ufffa\064\ufffa\102\ufffa\001\002\000\004\024" +
    "\126\001\002\000\032\003\ufffc\023\ufffc\044\ufffc\045\ufffc" +
    "\046\ufffc\047\ufffc\050\ufffc\053\ufffc\060\ufffc\063\ufffc\064" +
    "\ufffc\102\ufffc\001\002\000\032\003\ufffb\023\ufffb\044\ufffb" +
    "\045\ufffb\046\ufffb\047\ufffb\050\ufffb\053\ufffb\060\ufffb\063" +
    "\ufffb\064\ufffb\102\ufffb\001\002\000\004\022\116\001\002" +
    "\000\004\020\110\001\002\000\004\016\107\001\002\000" +
    "\032\003\032\023\106\044\035\045\017\046\015\047\014" +
    "\050\020\053\023\060\031\063\030\064\025\102\036\001" +
    "\002\000\032\003\ufff8\023\ufff8\044\ufff8\045\ufff8\046\ufff8" +
    "\047\ufff8\050\ufff8\053\ufff8\060\ufff8\063\ufff8\064\ufff8\102" +
    "\ufff8\001\002\000\004\102\uffd4\001\002\000\004\015\037" +
    "\001\002\000\024\004\046\005\041\006\042\007\050\013" +
    "\045\042\047\076\044\077\043\102\051\001\002\000\034" +
    "\010\065\012\061\013\060\014\062\016\104\031\056\032" +
    "\054\033\064\034\063\035\070\037\055\040\067\041\057" +
    "\001\002\000\036\010\ufff0\012\ufff0\013\ufff0\014\ufff0\016" +
    "\ufff0\025\ufff0\031\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0" +
    "\037\ufff0\040\ufff0\041\ufff0\001\002\000\036\010\102\012" +
    "\uffee\013\uffee\014\uffee\016\uffee\025\uffee\031\uffee\032\uffee" +
    "\033\uffee\034\uffee\035\uffee\037\uffee\040\uffee\041\uffee\001" +
    "\002\000\036\010\uffe8\012\uffe8\013\uffe8\014\uffe8\016\uffe8" +
    "\025\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\037" +
    "\uffe8\040\uffe8\041\uffe8\001\002\000\036\010\uffe9\012\uffe9" +
    "\013\uffe9\014\uffe9\016\uffe9\025\uffe9\031\uffe9\032\uffe9\033" +
    "\uffe9\034\uffe9\035\uffe9\037\uffe9\040\uffe9\041\uffe9\001\002" +
    "\000\024\004\046\005\041\006\042\007\050\013\045\042" +
    "\047\076\044\077\043\102\051\001\002\000\036\010\ufff1" +
    "\012\ufff1\013\ufff1\014\ufff1\016\ufff1\025\ufff1\031\ufff1\032" +
    "\ufff1\033\ufff1\034\ufff1\035\ufff1\037\ufff1\040\ufff1\041\ufff1" +
    "\001\002\000\024\004\046\005\041\006\042\007\050\013" +
    "\045\042\047\076\044\077\043\102\051\001\002\000\036" +
    "\010\uffef\012\uffef\013\uffef\014\uffef\016\uffef\025\uffef\031" +
    "\uffef\032\uffef\033\uffef\034\uffef\035\uffef\037\uffef\040\uffef" +
    "\041\uffef\001\002\000\036\010\052\012\uffe6\013\uffe6\014" +
    "\uffe6\016\uffe6\025\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6" +
    "\035\uffe6\037\uffe6\040\uffe6\041\uffe6\001\002\000\024\004" +
    "\046\005\041\006\042\007\050\013\045\042\047\076\044" +
    "\077\043\102\051\001\002\000\036\010\uffe5\012\061\013" +
    "\060\014\062\016\uffe5\025\uffe5\031\uffe5\032\uffe5\033\uffe5" +
    "\034\uffe5\035\uffe5\037\uffe5\040\uffe5\041\uffe5\001\002\000" +
    "\024\004\uffde\005\uffde\006\uffde\007\uffde\013\uffde\042\uffde" +
    "\076\uffde\077\uffde\102\uffde\001\002\000\024\004\uffda\005" +
    "\uffda\006\uffda\007\uffda\013\uffda\042\uffda\076\uffda\077\uffda" +
    "\102\uffda\001\002\000\024\004\uffdf\005\uffdf\006\uffdf\007" +
    "\uffdf\013\uffdf\042\uffdf\076\uffdf\077\uffdf\102\uffdf\001\002" +
    "\000\024\004\046\005\041\006\042\007\050\013\045\042" +
    "\047\076\044\077\043\102\051\001\002\000\024\004\046" +
    "\005\041\006\042\007\050\013\045\042\047\076\044\077" +
    "\043\102\051\001\002\000\024\004\046\005\041\006\042" +
    "\007\050\013\045\042\047\076\044\077\043\102\051\001" +
    "\002\000\024\004\046\005\041\006\042\007\050\013\045" +
    "\042\047\076\044\077\043\102\051\001\002\000\024\004" +
    "\uffdc\005\uffdc\006\uffdc\007\uffdc\013\uffdc\042\uffdc\076\uffdc" +
    "\077\uffdc\102\uffdc\001\002\000\024\004\uffdd\005\uffdd\006" +
    "\uffdd\007\uffdd\013\uffdd\042\uffdd\076\uffdd\077\uffdd\102\uffdd" +
    "\001\002\000\024\004\046\005\041\006\042\007\050\013" +
    "\045\042\047\076\044\077\043\102\051\001\002\000\024" +
    "\004\046\005\041\006\042\007\050\013\045\042\047\076" +
    "\044\077\043\102\051\001\002\000\024\004\046\005\041" +
    "\006\042\007\050\013\045\042\047\076\044\077\043\102" +
    "\051\001\002\000\024\004\uffdb\005\uffdb\006\uffdb\007\uffdb" +
    "\013\uffdb\042\uffdb\076\uffdb\077\uffdb\102\uffdb\001\002\000" +
    "\036\010\065\012\061\013\060\014\062\016\uffeb\025\uffeb" +
    "\031\056\032\054\033\064\034\063\035\070\037\055\040" +
    "\uffeb\041\uffeb\001\002\000\036\010\065\012\061\013\060" +
    "\014\062\016\uffed\025\uffed\031\056\032\054\033\064\034" +
    "\063\035\070\037\055\040\067\041\057\001\002\000\036" +
    "\010\ufff6\012\061\013\060\014\062\016\ufff6\025\ufff6\031" +
    "\ufff6\032\ufff6\033\ufff6\034\ufff6\035\ufff6\037\ufff6\040\ufff6" +
    "\041\ufff6\001\002\000\036\010\ufff3\012\ufff3\013\060\014" +
    "\ufff3\016\ufff3\025\ufff3\031\ufff3\032\ufff3\033\ufff3\034\ufff3" +
    "\035\ufff3\037\ufff3\040\ufff3\041\ufff3\001\002\000\036\010" +
    "\ufff4\012\ufff4\013\060\014\ufff4\016\ufff4\025\ufff4\031\ufff4" +
    "\032\ufff4\033\ufff4\034\ufff4\035\ufff4\037\ufff4\040\ufff4\041" +
    "\ufff4\001\002\000\036\010\ufff5\012\ufff5\013\060\014\ufff5" +
    "\016\ufff5\025\ufff5\031\ufff5\032\ufff5\033\ufff5\034\ufff5\035" +
    "\ufff5\037\ufff5\040\ufff5\041\ufff5\001\002\000\036\010\065" +
    "\012\061\013\060\014\062\016\uffea\025\uffea\031\056\032" +
    "\054\033\064\034\063\035\070\037\055\040\067\041\uffea" +
    "\001\002\000\036\010\065\012\061\013\060\014\062\016" +
    "\uffec\025\uffec\031\056\032\054\033\064\034\063\035\070" +
    "\037\055\040\uffec\041\uffec\001\002\000\036\010\ufff2\012" +
    "\ufff2\013\060\014\ufff2\016\ufff2\025\ufff2\031\ufff2\032\ufff2" +
    "\033\ufff2\034\ufff2\035\ufff2\037\ufff2\040\ufff2\041\ufff2\001" +
    "\002\000\024\004\046\005\041\006\042\007\050\013\045" +
    "\042\047\076\044\077\043\102\051\001\002\000\036\010" +
    "\uffe7\012\061\013\060\014\062\016\uffe7\025\uffe7\031\uffe7" +
    "\032\uffe7\033\uffe7\034\uffe7\035\uffe7\037\uffe7\040\uffe7\041" +
    "\uffe7\001\002\000\032\003\uffcf\023\uffcf\044\uffcf\045\uffcf" +
    "\046\uffcf\047\uffcf\050\uffcf\053\uffcf\060\uffcf\063\uffcf\064" +
    "\uffcf\102\uffcf\001\002\000\032\003\uffff\023\uffff\044\uffff" +
    "\045\uffff\046\uffff\047\uffff\050\uffff\053\uffff\060\uffff\063" +
    "\uffff\064\uffff\102\uffff\001\002\000\004\002\000\001\002" +
    "\000\032\003\ufff7\023\ufff7\044\ufff7\045\ufff7\046\ufff7\047" +
    "\ufff7\050\ufff7\053\ufff7\060\ufff7\063\ufff7\064\ufff7\102\ufff7" +
    "\001\002\000\004\061\111\001\002\000\004\024\112\001" +
    "\002\000\024\004\046\005\041\006\042\007\050\013\045" +
    "\042\047\076\044\077\043\102\051\001\002\000\034\010" +
    "\065\012\061\013\060\014\062\025\114\031\056\032\054" +
    "\033\064\034\063\035\070\037\055\040\067\041\057\001" +
    "\002\000\004\016\115\001\002\000\032\003\uffe4\023\uffe4" +
    "\044\uffe4\045\uffe4\046\uffe4\047\uffe4\050\uffe4\053\uffe4\060" +
    "\uffe4\063\uffe4\064\uffe4\102\uffe4\001\002\000\030\003\032" +
    "\044\035\045\017\046\015\047\014\050\020\053\023\060" +
    "\031\063\030\064\025\102\036\001\002\000\032\003\032" +
    "\023\120\044\035\045\017\046\015\047\014\050\020\053" +
    "\023\060\031\063\030\064\025\102\036\001\002\000\004" +
    "\064\121\001\002\000\004\024\122\001\002\000\024\004" +
    "\046\005\041\006\042\007\050\013\045\042\047\076\044" +
    "\077\043\102\051\001\002\000\034\010\065\012\061\013" +
    "\060\014\062\025\124\031\056\032\054\033\064\034\063" +
    "\035\070\037\055\040\067\041\057\001\002\000\004\016" +
    "\125\001\002\000\032\003\uffd8\023\uffd8\044\uffd8\045\uffd8" +
    "\046\uffd8\047\uffd8\050\uffd8\053\uffd8\060\uffd8\063\uffd8\064" +
    "\uffd8\102\uffd8\001\002\000\024\004\046\005\041\006\042" +
    "\007\050\013\045\042\047\076\044\077\043\102\051\001" +
    "\002\000\034\010\065\012\061\013\060\014\062\025\130" +
    "\031\056\032\054\033\064\034\063\035\070\037\055\040" +
    "\067\041\057\001\002\000\004\022\131\001\002\000\030" +
    "\003\032\044\035\045\017\046\015\047\014\050\020\053" +
    "\023\060\031\063\030\064\025\102\036\001\002\000\032" +
    "\003\032\023\133\044\035\045\017\046\015\047\014\050" +
    "\020\053\023\060\031\063\030\064\025\102\036\001\002" +
    "\000\032\003\uffd9\023\uffd9\044\uffd9\045\uffd9\046\uffd9\047" +
    "\uffd9\050\uffd9\053\uffd9\060\uffd9\063\uffd9\064\uffd9\102\uffd9" +
    "\001\002\000\024\004\046\005\041\006\042\007\050\013" +
    "\045\042\047\076\044\077\043\102\051\001\002\000\034" +
    "\010\065\012\061\013\060\014\062\025\136\031\056\032" +
    "\054\033\064\034\063\035\070\037\055\040\067\041\057" +
    "\001\002\000\004\022\137\001\002\000\030\003\032\044" +
    "\035\045\017\046\015\047\014\050\020\053\023\060\031" +
    "\063\030\064\025\102\036\001\002\000\032\003\032\023" +
    "\141\044\035\045\017\046\015\047\014\050\020\053\023" +
    "\060\031\063\030\064\025\102\036\001\002\000\036\003" +
    "\uffe3\023\uffe3\044\uffe3\045\uffe3\046\uffe3\047\uffe3\050\uffe3" +
    "\053\uffe3\054\143\060\uffe3\063\uffe3\064\uffe3\100\142\102" +
    "\uffe3\001\002\000\004\024\147\001\002\000\004\022\144" +
    "\001\002\000\030\003\032\044\035\045\017\046\015\047" +
    "\014\050\020\053\023\060\031\063\030\064\025\102\036" +
    "\001\002\000\032\003\032\023\146\044\035\045\017\046" +
    "\015\047\014\050\020\053\023\060\031\063\030\064\025" +
    "\102\036\001\002\000\032\003\uffe2\023\uffe2\044\uffe2\045" +
    "\uffe2\046\uffe2\047\uffe2\050\uffe2\053\uffe2\060\uffe2\063\uffe2" +
    "\064\uffe2\102\uffe2\001\002\000\024\004\046\005\041\006" +
    "\042\007\050\013\045\042\047\076\044\077\043\102\051" +
    "\001\002\000\034\010\065\012\061\013\060\014\062\025" +
    "\151\031\056\032\054\033\064\034\063\035\070\037\055" +
    "\040\067\041\057\001\002\000\004\022\152\001\002\000" +
    "\030\003\032\044\035\045\017\046\015\047\014\050\020" +
    "\053\023\060\031\063\030\064\025\102\036\001\002\000" +
    "\032\003\032\023\154\044\035\045\017\046\015\047\014" +
    "\050\020\053\023\060\031\063\030\064\025\102\036\001" +
    "\002\000\006\054\156\100\155\001\002\000\004\024\162" +
    "\001\002\000\004\022\157\001\002\000\030\003\032\044" +
    "\035\045\017\046\015\047\014\050\020\053\023\060\031" +
    "\063\030\064\025\102\036\001\002\000\032\003\032\023" +
    "\161\044\035\045\017\046\015\047\014\050\020\053\023" +
    "\060\031\063\030\064\025\102\036\001\002\000\032\003" +
    "\uffe0\023\uffe0\044\uffe0\045\uffe0\046\uffe0\047\uffe0\050\uffe0" +
    "\053\uffe0\060\uffe0\063\uffe0\064\uffe0\102\uffe0\001\002\000" +
    "\024\004\046\005\041\006\042\007\050\013\045\042\047" +
    "\076\044\077\043\102\051\001\002\000\034\010\065\012" +
    "\061\013\060\014\062\025\164\031\056\032\054\033\064" +
    "\034\063\035\070\037\055\040\067\041\057\001\002\000" +
    "\004\022\165\001\002\000\030\003\032\044\035\045\017" +
    "\046\015\047\014\050\020\053\023\060\031\063\030\064" +
    "\025\102\036\001\002\000\032\003\032\023\167\044\035" +
    "\045\017\046\015\047\014\050\020\053\023\060\031\063" +
    "\030\064\025\102\036\001\002\000\032\003\uffe1\023\uffe1" +
    "\044\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1\053\uffe1\060" +
    "\uffe1\063\uffe1\064\uffe1\102\uffe1\001\002\000\006\015\171" +
    "\016\172\001\002\000\024\004\046\005\041\006\042\007" +
    "\050\013\045\042\047\076\044\077\043\102\051\001\002" +
    "\000\032\003\uffd6\023\uffd6\044\uffd6\045\uffd6\046\uffd6\047" +
    "\uffd6\050\uffd6\053\uffd6\060\uffd6\063\uffd6\064\uffd6\102\uffd6" +
    "\001\002\000\034\010\065\012\061\013\060\014\062\016" +
    "\174\031\056\032\054\033\064\034\063\035\070\037\055" +
    "\040\067\041\057\001\002\000\032\003\uffd5\023\uffd5\044" +
    "\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5\053\uffd5\060\uffd5" +
    "\063\uffd5\064\uffd5\102\uffd5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\172\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\003\012\005\032\011" +
    "\025\012\020\013\026\015\023\017\021\020\015\021\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\003\104\011\025\012\020\013\026\015\023" +
    "\017\021\020\015\021\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\037\001\001" +
    "\000\004\014\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\100" +
    "\001\001\000\002\001\001\000\004\007\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\052\001\001" +
    "\000\004\014\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\076\001\001\000\004" +
    "\007\075\001\001\000\004\007\074\001\001\000\004\007" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\072\001\001\000\004\007\071\001\001\000\004\007" +
    "\070\001\001\000\002\001\001\000\004\014\065\001\001" +
    "\000\004\014\065\001\001\000\004\014\065\001\001\000" +
    "\004\014\065\001\001\000\004\014\065\001\001\000\004" +
    "\014\065\001\001\000\004\014\065\001\001\000\004\014" +
    "\065\001\001\000\004\014\065\001\001\000\004\007\102" +
    "\001\001\000\004\014\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\112\001\001\000" +
    "\004\014\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\003\012\005\116\011\025\012\020\013\026\015" +
    "\023\017\021\020\015\021\033\001\001\000\022\003\104" +
    "\011\025\012\020\013\026\015\023\017\021\020\015\021" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\122\001\001\000\004\014\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\126\001\001\000\004" +
    "\014\065\001\001\000\002\001\001\000\024\003\012\005" +
    "\131\011\025\012\020\013\026\015\023\017\021\020\015" +
    "\021\033\001\001\000\022\003\104\011\025\012\020\013" +
    "\026\015\023\017\021\020\015\021\033\001\001\000\002" +
    "\001\001\000\004\007\134\001\001\000\004\014\065\001" +
    "\001\000\002\001\001\000\024\003\012\005\137\011\025" +
    "\012\020\013\026\015\023\017\021\020\015\021\033\001" +
    "\001\000\022\003\104\011\025\012\020\013\026\015\023" +
    "\017\021\020\015\021\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\003\012\005\144" +
    "\011\025\012\020\013\026\015\023\017\021\020\015\021" +
    "\033\001\001\000\022\003\104\011\025\012\020\013\026" +
    "\015\023\017\021\020\015\021\033\001\001\000\002\001" +
    "\001\000\004\007\147\001\001\000\004\014\065\001\001" +
    "\000\002\001\001\000\024\003\012\005\152\011\025\012" +
    "\020\013\026\015\023\017\021\020\015\021\033\001\001" +
    "\000\022\003\104\011\025\012\020\013\026\015\023\017" +
    "\021\020\015\021\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\003\012\005\157\011" +
    "\025\012\020\013\026\015\023\017\021\020\015\021\033" +
    "\001\001\000\022\003\104\011\025\012\020\013\026\015" +
    "\023\017\021\020\015\021\033\001\001\000\002\001\001" +
    "\000\004\007\162\001\001\000\004\014\065\001\001\000" +
    "\002\001\001\000\024\003\012\005\165\011\025\012\020" +
    "\013\026\015\023\017\021\020\015\021\033\001\001\000" +
    "\022\003\104\011\025\012\020\013\026\015\023\017\021" +
    "\020\015\021\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\172\001\001\000\002\001\001\000\004" +
    "\014\065\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static String resultado = ""; 

    public void syntax_error(Symbol s)
    {       
            Erroor errorsito = new Erroor("Sintactico", s.value.toString() ,"No es valido en este lenguaje sintact", s.right, s.left);
            Funcion.ErrorList.add(errorsito);
            System.err.println("Error Sintactico: "+ s.value.toString() + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );        
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {       
            Erroor errorsito = new Erroor("Sintactico", s.value.toString() ,"No es valido en este lenguaje sintact", s.right, s.left);
            Funcion.ErrorList.add(errorsito);
            System.err.println("Error Sintactico: "+ s.value.toString() + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

  
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= TkVOID_R TkMAIN_R TkPARENTESISAbre TkPARENTESISCierra TkLLAVEA listainstrTraduccion TkLLAVEC 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList lista = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		   
                            
                            LinkedList<String> listaN = new LinkedList<>();
                            listaN.add("def main( ):");
                            func.Funcion.ContadorIndentacion++;
                            listaN.addAll(func.Funcion.IndentacionPY(lista));
                            func.Funcion.ContadorIndentacion--;
                            listaN.add("if__name__ = \"__main__\":\n\tmain()");
                            func.Funcion.ListaTraducccionPy = listaN;
                                
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // listainstrTraduccion ::= listainstrTraduccion instruccionTraduccion 
            {
              LinkedList RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList lista = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                lista.addAll((LinkedList) val);
                                RESULT = (LinkedList) lista;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listainstrTraduccion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // listainstrTraduccion ::= instruccionTraduccion 
            {
              LinkedList RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                LinkedList<String> lista = new LinkedList<>();
                                lista.addAll((LinkedList)val);
                                RESULT = (LinkedList) lista;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listainstrTraduccion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccionTraduccion ::= instruccionConsoleWr 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionTraduccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccionTraduccion ::= instruccionIF 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionTraduccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccionTraduccion ::= instruccionWhile 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionTraduccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccionTraduccion ::= instruccionDowhile 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionTraduccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccionTraduccion ::= declaracionvariable 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionTraduccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccionTraduccion ::= asignacionvariable 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionTraduccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccionTraduccion ::= error TkPUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionTraduccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expresionTraduccion ::= expresionTraduccion TkSUMA expresionTraduccion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT =  a.toString()+"+"+b.toString() ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionTraduccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expresionTraduccion ::= expresionTraduccion TkRESTA expresionTraduccion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.toString()+"-"+b.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionTraduccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expresionTraduccion ::= expresionTraduccion TkMULTIPLICACION expresionTraduccion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a.toString()+"*"+b.toString() ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionTraduccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expresionTraduccion ::= expresionTraduccion TkDIVISION expresionTraduccion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a.toString()+"/"+b.toString() ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionTraduccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expresionTraduccion ::= TkRESTA expresionTraduccion 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = "-"+b.toString() ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionTraduccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expresionTraduccion ::= TkENTERO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionTraduccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expresionTraduccion ::= TkDECIMAL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionTraduccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expresionTraduccion ::= TkErChar 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionTraduccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expresionTraduccion ::= TkCADENA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionTraduccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expresionTraduccion ::= expresionTraduccion expresionRelacional expresionTraduccion 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = b.toString()+a.toString()+c.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionTraduccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresionTraduccion ::= TkNOT expresionTraduccion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT  = " not "+a.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionTraduccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expresionTraduccion ::= expresionTraduccion TkAND expresionTraduccion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT  = a.toString()+" and "+b.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionTraduccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expresionTraduccion ::= expresionTraduccion TkOR expresionTraduccion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT  = a.toString()+" or "+b.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionTraduccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expresionTraduccion ::= TkTrue 
            {
              Object RESULT =null;
		RESULT = " True ";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionTraduccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expresionTraduccion ::= TkFalse 
            {
              Object RESULT =null;
		RESULT = " False ";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionTraduccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expresionTraduccion ::= TkCADENA TkSUMA expresionTraduccion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a.toString()+" , "+b.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionTraduccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expresionTraduccion ::= TkIdentificador 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionTraduccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expresionTraduccion ::= TkIdentificador TkSUMA expresionTraduccion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a.toString()+" + "+b.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionTraduccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instruccionConsoleWr ::= TkCONSOLE_R TkPUNTO TkWRITE_R TkPARENTESISAbre expresionTraduccion TkPARENTESISCierra TkPUNTOYCOMA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                            LinkedList<String> lista = new LinkedList<>();
                            lista.add("print("+val+")");
                            RESULT = lista;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionConsoleWr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // instruccionIF ::= TkIF_R TkPARENTESISAbre expresionTraduccion TkPARENTESISCierra TkLLAVEA listainstrTraduccion TkLLAVEC 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int listaInstTradleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaInstTradright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList listaInstTrad = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                            LinkedList<String> lista = new LinkedList<>();
                            lista.add("if " + exp + ":");
                            func.Funcion.ContadorIndentacion++;
                            lista.addAll(func.Funcion.IndentacionPY(listaInstTrad));
                            func.Funcion.ContadorIndentacion--;
                            RESULT = lista;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionIF",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // instruccionIF ::= TkIF_R TkPARENTESISAbre expresionTraduccion TkPARENTESISCierra TkLLAVEA listainstrTraduccion TkLLAVEC TkELSE_R TkLLAVEA listainstrTraduccion TkLLAVEC 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int listaInstTrad1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int listaInstTrad1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		LinkedList listaInstTrad1 = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int listaInstTrad2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaInstTrad2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList listaInstTrad2 = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                            LinkedList<String> lista = new LinkedList<>();
                            lista.add("if " + exp + ":");
                            func.Funcion.ContadorIndentacion++;
                            lista.addAll(func.Funcion.IndentacionPY(listaInstTrad1));
                            func.Funcion.ContadorIndentacion--;
                            lista.add("else:");
                            func.Funcion.ContadorIndentacion++;
                            lista.addAll(func.Funcion.IndentacionPY(listaInstTrad2));
                            func.Funcion.ContadorIndentacion--;
                            RESULT = lista;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionIF",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // instruccionIF ::= TkIF_R TkPARENTESISAbre expresionTraduccion TkPARENTESISCierra TkLLAVEA listainstrTraduccion TkLLAVEC TkElseIf TkPARENTESISAbre expresionTraduccion TkPARENTESISCierra TkLLAVEA listainstrTraduccion TkLLAVEC TkElseIf TkPARENTESISAbre expresionTraduccion TkPARENTESISCierra TkLLAVEA listainstrTraduccion TkLLAVEC 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-18)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-18)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-18)).value;
		int listaInstTrad1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).left;
		int listaInstTrad1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).right;
		LinkedList listaInstTrad1 = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-15)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int listaInstTrad2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int listaInstTrad2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		LinkedList listaInstTrad2 = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int exp3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int exp3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object exp3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int listaInstTrad3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaInstTrad3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList listaInstTrad3 = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                            LinkedList<String> lista = new LinkedList<>();
                            lista.add("if " + exp + ":");
                            func.Funcion.ContadorIndentacion++;
                            lista.addAll(func.Funcion.IndentacionPY(listaInstTrad1));
                            func.Funcion.ContadorIndentacion--;
                            lista.add("else if " +exp2+" :");
                            func.Funcion.ContadorIndentacion++;
                            lista.addAll(func.Funcion.IndentacionPY(listaInstTrad2));
                            func.Funcion.ContadorIndentacion--;
                            lista.add("else if " +exp3+" :");
                            func.Funcion.ContadorIndentacion++;
                            lista.addAll(func.Funcion.IndentacionPY(listaInstTrad3));
                            func.Funcion.ContadorIndentacion--;
                            RESULT = lista;   
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionIF",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-20)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // instruccionIF ::= TkIF_R TkPARENTESISAbre expresionTraduccion TkPARENTESISCierra TkLLAVEA listainstrTraduccion TkLLAVEC TkElseIf TkPARENTESISAbre expresionTraduccion TkPARENTESISCierra TkLLAVEA listainstrTraduccion TkLLAVEC TkELSE_R TkLLAVEA listainstrTraduccion TkLLAVEC 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-15)).value;
		int listaInstTrad1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
		int listaInstTrad1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
		LinkedList listaInstTrad1 = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int listaInstTrad2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int listaInstTrad2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		LinkedList listaInstTrad2 = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int listaInstTrad3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaInstTrad3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList listaInstTrad3 = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                            LinkedList<String> lista = new LinkedList<>();
                            lista.add("if " + exp + ":");
                            func.Funcion.ContadorIndentacion++;
                            lista.addAll(func.Funcion.IndentacionPY(listaInstTrad1));
                            func.Funcion.ContadorIndentacion--;
                            lista.add("else if " +exp2+" :");
                            func.Funcion.ContadorIndentacion++;
                            lista.addAll(func.Funcion.IndentacionPY(listaInstTrad2));
                            func.Funcion.ContadorIndentacion--;
                            lista.add("else:");
                            func.Funcion.ContadorIndentacion++;
                            lista.addAll(func.Funcion.IndentacionPY(listaInstTrad3));
                            func.Funcion.ContadorIndentacion--;
                            RESULT = lista;   
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionIF",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-17)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresionRelacional ::= TkMAYORQUE 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresionRelacional ::= TkMENORQUE 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresionRelacional ::= TkMAYORIGUAL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresionRelacional ::= TkMENORIGUAL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresionRelacional ::= TkIGUALIGUAL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresionRelacional ::= TkIDISTINTO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instruccionWhile ::= TkWHILE_R TkPARENTESISAbre expresionTraduccion TkPARENTESISCierra TkLLAVEA listainstrTraduccion TkLLAVEC 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int listainstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listainstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList listainst = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                            LinkedList<String> lista = new LinkedList<>();
                            lista.add("while " + exp + " :");
                            func.Funcion.ContadorIndentacion++;
                            lista.addAll(func.Funcion.IndentacionPY(listainst));
                            func.Funcion.ContadorIndentacion--;
                            RESULT = lista;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionWhile",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instruccionDowhile ::= TkDO_R TkLLAVEA listainstrTraduccion TkLLAVEC TkWHILE_R TkPARENTESISAbre expresionTraduccion TkPARENTESISCierra TkPUNTOYCOMA 
            {
              Object RESULT =null;
		int listainstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int listainstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		LinkedList listainst = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                        LinkedList<String> lista = new LinkedList<>();
                        lista.add("while True:");
                        func.Funcion.ContadorIndentacion++;
                        lista.addAll(func.Funcion.IndentacionPY(listainst));
                        lista.add("if  (" + exp + "):");
                        func.Funcion.ContadorIndentacion++;
                        lista.add("break");
                        func.Funcion.ContadorIndentacion--;
                        func.Funcion.ContadorIndentacion--;
                        RESULT = lista;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionDowhile",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instruccionFor ::= TkFOR_R TkPARENTESISAbre TkPARENTESISCierra TkLLAVEA listainstrTraduccion TkLLAVEC 
            {
              Object RESULT =null;
		int listainstrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listainstrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList listainstr = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionFor",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // declaracionvariable ::= tipoDato TkIdentificador TkPUNTOYCOMA 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        LinkedList<String> lista = new LinkedList<>();
                        lista.add(b.toString()+" = None");
                        RESULT = lista;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionvariable",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // declaracionvariable ::= tipoDato TkIdentificador TkIGUAL expresionTraduccion TkPUNTOYCOMA 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        LinkedList<String> lista = new LinkedList<>();
                        lista.add(b.toString()+" = "+a.toString());
                        RESULT = lista;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionvariable",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // tipoDato ::= TkINT_R 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoDato",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // tipoDato ::= TkDOUBLE_R 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoDato",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // tipoDato ::= TkCHAR_R 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoDato",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // tipoDato ::= TkBOOL_R 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoDato",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // tipoDato ::= TkSTRING_R 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoDato",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // asignacionvariable ::= TkIdentificador TkIGUAL expresionTraduccion TkPUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                            LinkedList<String> lista = new LinkedList<>();
                            lista.add(a.toString() + "=" + b.toString());
                            RESULT = lista;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacionvariable",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
