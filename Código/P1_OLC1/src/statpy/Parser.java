
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package statpy;

import java_cup.runtime.*;
import clases.Erroor;
import func.Funcion;
import traductionPy.indentPy;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\036\000\002\002\004\000\002\002\011\000\002\005" +
    "\004\000\002\005\003\000\002\003\003\000\002\003\003" +
    "\000\002\007\005\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\004\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\005\000\002\007\004\000\002\007\005\000\002\007\005" +
    "\000\002\007\003\000\002\007\003\000\002\012\011\000" +
    "\002\011\011\000\002\011\015\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\076\000\004\053\004\001\002\000\004\054\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\026\010\001\002\000\004\027\011\001\002\000" +
    "\004\024\012\001\002\000\006\055\017\062\016\001\002" +
    "\000\010\025\ufffe\055\ufffe\062\ufffe\001\002\000\010\025" +
    "\100\055\017\062\016\001\002\000\010\025\ufffc\055\ufffc" +
    "\062\ufffc\001\002\000\004\022\072\001\002\000\004\026" +
    "\021\001\002\000\010\025\ufffd\055\ufffd\062\ufffd\001\002" +
    "\000\022\004\030\005\023\010\024\011\032\015\027\044" +
    "\031\100\026\101\025\001\002\000\034\012\045\014\040" +
    "\015\041\016\042\027\061\033\036\034\034\035\044\036" +
    "\043\037\050\041\035\042\047\043\037\001\002\000\034" +
    "\012\ufff5\014\ufff5\015\ufff5\016\ufff5\027\ufff5\033\ufff5\034" +
    "\ufff5\035\ufff5\036\ufff5\037\ufff5\041\ufff5\042\ufff5\043\ufff5" +
    "\001\002\000\034\012\ufff3\014\ufff3\015\ufff3\016\ufff3\027" +
    "\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3\041\ufff3" +
    "\042\ufff3\043\ufff3\001\002\000\034\012\uffed\014\uffed\015" +
    "\uffed\016\uffed\027\uffed\033\uffed\034\uffed\035\uffed\036\uffed" +
    "\037\uffed\041\uffed\042\uffed\043\uffed\001\002\000\034\012" +
    "\uffee\014\uffee\015\uffee\016\uffee\027\uffee\033\uffee\034\uffee" +
    "\035\uffee\036\uffee\037\uffee\041\uffee\042\uffee\043\uffee\001" +
    "\002\000\022\004\030\005\023\010\024\011\032\015\027" +
    "\044\031\100\026\101\025\001\002\000\034\012\ufff6\014" +
    "\ufff6\015\ufff6\016\ufff6\027\ufff6\033\ufff6\034\ufff6\035\ufff6" +
    "\036\ufff6\037\ufff6\041\ufff6\042\ufff6\043\ufff6\001\002\000" +
    "\022\004\030\005\023\010\024\011\032\015\027\044\031" +
    "\100\026\101\025\001\002\000\034\012\ufff4\014\ufff4\015" +
    "\ufff4\016\ufff4\027\ufff4\033\ufff4\034\ufff4\035\ufff4\036\ufff4" +
    "\037\ufff4\041\ufff4\042\ufff4\043\ufff4\001\002\000\034\012" +
    "\045\014\040\015\041\016\042\027\ufff1\033\036\034\034" +
    "\035\044\036\043\037\050\041\035\042\ufff1\043\ufff1\001" +
    "\002\000\022\004\uffe8\005\uffe8\010\uffe8\011\uffe8\015\uffe8" +
    "\044\uffe8\100\uffe8\101\uffe8\001\002\000\022\004\uffe4\005" +
    "\uffe4\010\uffe4\011\uffe4\015\uffe4\044\uffe4\100\uffe4\101\uffe4" +
    "\001\002\000\022\004\uffe9\005\uffe9\010\uffe9\011\uffe9\015" +
    "\uffe9\044\uffe9\100\uffe9\101\uffe9\001\002\000\022\004\030" +
    "\005\023\010\024\011\032\015\027\044\031\100\026\101" +
    "\025\001\002\000\022\004\030\005\023\010\024\011\032" +
    "\015\027\044\031\100\026\101\025\001\002\000\022\004" +
    "\030\005\023\010\024\011\032\015\027\044\031\100\026" +
    "\101\025\001\002\000\022\004\030\005\023\010\024\011" +
    "\032\015\027\044\031\100\026\101\025\001\002\000\022" +
    "\004\uffe6\005\uffe6\010\uffe6\011\uffe6\015\uffe6\044\uffe6\100" +
    "\uffe6\101\uffe6\001\002\000\022\004\uffe7\005\uffe7\010\uffe7" +
    "\011\uffe7\015\uffe7\044\uffe7\100\uffe7\101\uffe7\001\002\000" +
    "\022\004\030\005\023\010\024\011\032\015\027\044\031" +
    "\100\026\101\025\001\002\000\022\004\030\005\023\010" +
    "\024\011\032\015\027\044\031\100\026\101\025\001\002" +
    "\000\022\004\030\005\023\010\024\011\032\015\027\044" +
    "\031\100\026\101\025\001\002\000\022\004\uffe5\005\uffe5" +
    "\010\uffe5\011\uffe5\015\uffe5\044\uffe5\100\uffe5\101\uffe5\001" +
    "\002\000\034\012\045\014\040\015\041\016\042\027\ufff0" +
    "\033\036\034\034\035\044\036\043\037\050\041\035\042" +
    "\ufff0\043\ufff0\001\002\000\034\012\045\014\040\015\041" +
    "\016\042\027\ufff2\033\036\034\034\035\044\036\043\037" +
    "\050\041\035\042\047\043\037\001\002\000\034\012\ufffb" +
    "\014\040\015\041\016\042\027\ufffb\033\ufffb\034\ufffb\035" +
    "\ufffb\036\ufffb\037\ufffb\041\ufffb\042\ufffb\043\ufffb\001\002" +
    "\000\034\012\ufff8\014\ufff8\015\041\016\ufff8\027\ufff8\033" +
    "\ufff8\034\ufff8\035\ufff8\036\ufff8\037\ufff8\041\ufff8\042\ufff8" +
    "\043\ufff8\001\002\000\034\012\ufffa\014\ufffa\015\041\016" +
    "\ufffa\027\ufffa\033\ufffa\034\ufffa\035\ufffa\036\ufffa\037\ufffa" +
    "\041\ufffa\042\ufffa\043\ufffa\001\002\000\034\012\ufff9\014" +
    "\ufff9\015\041\016\ufff9\027\ufff9\033\ufff9\034\ufff9\035\ufff9" +
    "\036\ufff9\037\ufff9\041\ufff9\042\ufff9\043\ufff9\001\002\000" +
    "\034\012\045\014\040\015\041\016\042\027\uffef\033\036" +
    "\034\034\035\044\036\043\037\050\041\035\042\047\043" +
    "\uffef\001\002\000\034\012\ufff7\014\ufff7\015\041\016\ufff7" +
    "\027\ufff7\033\ufff7\034\ufff7\035\ufff7\036\ufff7\037\ufff7\041" +
    "\ufff7\042\ufff7\043\ufff7\001\002\000\004\024\062\001\002" +
    "\000\006\055\017\062\016\001\002\000\010\025\065\055" +
    "\017\062\016\001\002\000\010\025\uffff\055\uffff\062\uffff" +
    "\001\002\000\012\025\uffeb\055\uffeb\056\066\062\uffeb\001" +
    "\002\000\004\024\067\001\002\000\006\055\017\062\016" +
    "\001\002\000\010\025\071\055\017\062\016\001\002\000" +
    "\010\025\uffea\055\uffea\062\uffea\001\002\000\004\063\073" +
    "\001\002\000\004\026\074\001\002\000\022\004\030\005" +
    "\023\010\024\011\032\015\027\044\031\100\026\101\025" +
    "\001\002\000\034\012\045\014\040\015\041\016\042\027" +
    "\076\033\036\034\034\035\044\036\043\037\050\041\035" +
    "\042\047\043\037\001\002\000\004\020\077\001\002\000" +
    "\010\025\uffec\055\uffec\062\uffec\001\002\000\004\002\000" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\076\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\012\005\013\011" +
    "\014\012\017\001\001\000\002\001\001\000\010\003\063" +
    "\011\014\012\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\021" +
    "\001\001\000\004\014\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\057\001\001\000\002\001\001\000\004\007\032\001" +
    "\001\000\002\001\001\000\004\014\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\056\001\001\000\004\007\055\001\001\000\004\007\054" +
    "\001\001\000\004\007\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\052\001\001\000\004\007\051" +
    "\001\001\000\004\007\050\001\001\000\002\001\001\000" +
    "\004\014\045\001\001\000\004\014\045\001\001\000\004" +
    "\014\045\001\001\000\004\014\045\001\001\000\004\014" +
    "\045\001\001\000\004\014\045\001\001\000\004\014\045" +
    "\001\001\000\004\014\045\001\001\000\002\001\001\000" +
    "\012\003\012\005\062\011\014\012\017\001\001\000\010" +
    "\003\063\011\014\012\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\003\012\005\067" +
    "\011\014\012\017\001\001\000\010\003\063\011\014\012" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\074\001\001\000\004\014\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static String resultado = ""; 

    public void syntax_error(Symbol s)
    {       
            Erroor errorsito = new Erroor("Sintactico", s.value.toString() ,"No es valido en este lenguaje sintact", s.right, s.left);
            Funcion.ErrorList.add(errorsito);
            System.err.println("Error Sintactico: "+ s.value.toString() + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );        
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {       
            Erroor errorsito = new Erroor("Sintactico", s.value.toString() ,"No es valido en este lenguaje sintact", s.right, s.left);
            Funcion.ErrorList.add(errorsito);
            System.err.println("Error Sintactico: "+ s.value.toString() + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

  
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= TkVOID_R TkMAIN_R TkPARENTESISAbre TkPARENTESISCierra TkLLAVEA listainstrTraduccion TkLLAVEC 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList lista = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		   
                            
                            LinkedList<String> listaN = new LinkedList<>();
                            listaN.add("def main( ):");
                            func.Funcion.ContadorIndentacion++;
                            listaN.addAll(func.Funcion.IndentacionPY(lista));
                            func.Funcion.ContadorIndentacion--;
                            listaN.add("if__name__ = \"__main__\":\n\tmain()");
                            func.Funcion.ListaTraducccionPy = listaN;
                                
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // listainstrTraduccion ::= listainstrTraduccion instruccionTraduccion 
            {
              LinkedList RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList lista = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                lista.addAll((LinkedList) val);
                                RESULT = (LinkedList) lista;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listainstrTraduccion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // listainstrTraduccion ::= instruccionTraduccion 
            {
              LinkedList RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                LinkedList<String> lista = new LinkedList<>();
                                lista.addAll((LinkedList)val);
                                RESULT = (LinkedList) lista;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listainstrTraduccion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccionTraduccion ::= instruccionConsoleWr 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionTraduccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccionTraduccion ::= instruccionIF 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionTraduccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expresionTraduccion ::= expresionTraduccion TkSUMA expresionTraduccion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT =  a.toString()+"+"+b.toString() ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionTraduccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expresionTraduccion ::= expresionTraduccion TkRESTA expresionTraduccion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.toString()+"-"+b.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionTraduccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expresionTraduccion ::= expresionTraduccion TkMULTIPLICACION expresionTraduccion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a.toString()+"*"+b.toString() ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionTraduccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expresionTraduccion ::= expresionTraduccion TkDIVISION expresionTraduccion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a.toString()+"/"+b.toString() ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionTraduccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expresionTraduccion ::= TkRESTA expresionTraduccion 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = "-"+b.toString() ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionTraduccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expresionTraduccion ::= TkENTERO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionTraduccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expresionTraduccion ::= TkDECIMAL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionTraduccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expresionTraduccion ::= TkErChar 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionTraduccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expresionTraduccion ::= TkCADENA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionTraduccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expresionTraduccion ::= expresionTraduccion expresionRelacional expresionTraduccion 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = b.toString()+a.toString()+c.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionTraduccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expresionTraduccion ::= TkNOT expresionTraduccion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT  = " not "+a.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionTraduccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expresionTraduccion ::= expresionTraduccion TkAND expresionTraduccion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT  = a.toString()+" and "+b.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionTraduccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expresionTraduccion ::= expresionTraduccion TkOR expresionTraduccion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT  = a.toString()+" or "+b.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionTraduccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expresionTraduccion ::= TkTrue 
            {
              Object RESULT =null;
		RESULT = " True ";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionTraduccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expresionTraduccion ::= TkFalse 
            {
              Object RESULT =null;
		RESULT = " False ";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionTraduccion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruccionConsoleWr ::= TkCONSOLE_R TkPUNTO TkWRITE_R TkPARENTESISAbre expresionTraduccion TkPARENTESISCierra TkPUNTOYCOMA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                            LinkedList<String> lista = new LinkedList<>();
                            lista.add("print("+val+")");
                            RESULT = lista;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionConsoleWr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instruccionIF ::= TkIF_R TkPARENTESISAbre expresionTraduccion TkPARENTESISCierra TkLLAVEA listainstrTraduccion TkLLAVEC 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int listaInstTradleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaInstTradright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList listaInstTrad = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                            LinkedList<String> lista = new LinkedList<>();
                            lista.add("if " + exp + ":");
                            func.Funcion.ContadorIndentacion++;
                            lista.addAll(func.Funcion.IndentacionPY(listaInstTrad));
                            func.Funcion.ContadorIndentacion--;
                            RESULT = lista;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionIF",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instruccionIF ::= TkIF_R TkPARENTESISAbre expresionTraduccion TkPARENTESISCierra TkLLAVEA listainstrTraduccion TkLLAVEC TkELSE_R TkLLAVEA listainstrTraduccion TkLLAVEC 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int listaInstTrad1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int listaInstTrad1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		LinkedList listaInstTrad1 = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int listaInstTrad2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaInstTrad2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList listaInstTrad2 = (LinkedList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                            LinkedList<String> lista = new LinkedList<>();
                            lista.add("if " + exp + ":");
                            func.Funcion.ContadorIndentacion++;
                            lista.addAll(func.Funcion.IndentacionPY(listaInstTrad1));
                            func.Funcion.ContadorIndentacion--;
                            lista.add("else:");
                            func.Funcion.ContadorIndentacion++;
                            lista.addAll(func.Funcion.IndentacionPY(listaInstTrad2));
                            func.Funcion.ContadorIndentacion--;
                            RESULT = lista;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionIF",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expresionRelacional ::= TkMAYORQUE 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expresionRelacional ::= TkMENORQUE 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expresionRelacional ::= TkMAYORIGUAL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expresionRelacional ::= TkMENORIGUAL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expresionRelacional ::= TkIGUALIGUAL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expresionRelacional ::= TkIDISTINTO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
