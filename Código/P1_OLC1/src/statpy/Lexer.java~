// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/statpy/Lexer.jflex

// ------------  Paquete e importaciones ------------
package statpy; 

import java_cup.runtime.*;
import clases.Erroor;
import clases.Token;
import func.Funcion;
import static func.Funcion.TokenList;
import static func.Funcion.ErrorList;


@SuppressWarnings("fallthrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\1\u0400\266\u0200\10\u0500\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\2\1\22\0\1\1\1\4"+
    "\1\5\1\0\1\6\1\0\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\12\21\1\22"+
    "\1\23\1\24\1\25\1\26\2\0\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\47\1\60"+
    "\1\0\1\61\1\0\1\62\1\0\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105"+
    "\1\106\1\107\1\110\1\111\1\112\1\113\1\103\1\114"+
    "\1\115\1\116\7\0\1\3\113\0\1\47\37\0\1\47"+
    "\76\0\2\117\115\0\1\120\u01a8\0\2\3\u0100\0\1\121"+
    "\325\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\2\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\15\1\1\23\1\24"+
    "\16\25\1\26\1\1\1\27\1\30\1\0\1\31\1\32"+
    "\1\0\1\33\1\0\1\34\1\0\1\35\1\36\1\37"+
    "\6\0\1\40\5\0\1\41\13\0\1\42\6\25\1\40"+
    "\5\25\1\41\13\25\1\43\1\44\1\0\1\45\13\0"+
    "\1\46\1\0\1\47\12\0\13\25\1\46\1\25\1\47"+
    "\12\25\1\50\1\51\1\0\1\52\1\53\5\0\1\54"+
    "\1\55\2\0\1\56\4\0\1\57\1\0\1\60\2\0"+
    "\1\51\1\25\1\52\1\53\5\25\1\54\1\55\2\25"+
    "\1\56\4\25\1\57\1\25\1\60\2\25\1\61\5\0"+
    "\1\62\6\0\1\63\1\64\1\61\5\25\1\62\6\25"+
    "\1\63\1\64\4\0\1\65\2\0\1\66\1\67\1\70"+
    "\1\0\4\25\1\65\2\25\1\66\1\67\1\70\1\25"+
    "\1\0\1\71\1\72\3\0\1\73\1\74\1\75\1\25"+
    "\1\71\1\72\3\25\1\73\1\74\1\75\4\0\1\76"+
    "\4\25\1\76\4\0\4\25\1\77\2\0\1\100\2\25"+
    "\1\100\2\0\2\25\2\0\2\25\1\0\1\101\1\25"+
    "\1\101\1\0\1\25\2\102";

  private static int [] zzUnpackAction() {
    int [] result = new int[325];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\122\0\122\0\244\0\366\0\122\0\u0148\0\u019a"+
    "\0\122\0\122\0\122\0\u01ec\0\122\0\122\0\122\0\u023e"+
    "\0\u0290\0\122\0\122\0\u02e2\0\u0334\0\u0386\0\u03d8\0\u042a"+
    "\0\u047c\0\u04ce\0\u0520\0\u0572\0\u05c4\0\u0616\0\u0668\0\u06ba"+
    "\0\u070c\0\u075e\0\u07b0\0\u0802\0\122\0\u0854\0\u08a6\0\u08f8"+
    "\0\u094a\0\u099c\0\u09ee\0\u0a40\0\u0a92\0\u0ae4\0\u0b36\0\u0b88"+
    "\0\u0bda\0\u0c2c\0\u0c7e\0\122\0\u0cd0\0\122\0\122\0\366"+
    "\0\122\0\122\0\u0d22\0\122\0\u0d74\0\u0dc6\0\u0e18\0\122"+
    "\0\122\0\122\0\u0e6a\0\u0ebc\0\u0f0e\0\u0f60\0\u0fb2\0\u1004"+
    "\0\u1056\0\u10a8\0\u10fa\0\u114c\0\u119e\0\u11f0\0\122\0\u1242"+
    "\0\u1294\0\u12e6\0\u1338\0\u138a\0\u13dc\0\u142e\0\u1480\0\u14d2"+
    "\0\u1524\0\u1576\0\122\0\u15c8\0\u161a\0\u166c\0\u16be\0\u1710"+
    "\0\u1762\0\u17b4\0\u1806\0\u1858\0\u18aa\0\u18fc\0\u194e\0\u0854"+
    "\0\u19a0\0\u19f2\0\u1a44\0\u1a96\0\u1ae8\0\u1b3a\0\u1b8c\0\u1bde"+
    "\0\u1c30\0\u1c82\0\u1cd4\0\122\0\122\0\u1d26\0\u0e18\0\u1d78"+
    "\0\u1dca\0\u1e1c\0\u1e6e\0\u1ec0\0\u1f12\0\u1f64\0\u1fb6\0\u2008"+
    "\0\u205a\0\u20ac\0\122\0\u20fe\0\122\0\u2150\0\u21a2\0\u21f4"+
    "\0\u2246\0\u2298\0\u22ea\0\u233c\0\u238e\0\u23e0\0\u2432\0\u2484"+
    "\0\u24d6\0\u2528\0\u257a\0\u25cc\0\u261e\0\u2670\0\u26c2\0\u2714"+
    "\0\u2766\0\u27b8\0\u0854\0\u280a\0\u0854\0\u285c\0\u28ae\0\u2900"+
    "\0\u2952\0\u29a4\0\u29f6\0\u2a48\0\u2a9a\0\u2aec\0\u2b3e\0\122"+
    "\0\122\0\u2b90\0\122\0\122\0\u2be2\0\u2c34\0\u2c86\0\u2cd8"+
    "\0\u2d2a\0\122\0\122\0\u2d7c\0\u2dce\0\122\0\u2e20\0\u2e72"+
    "\0\u2ec4\0\u2f16\0\122\0\u2f68\0\122\0\u2fba\0\u300c\0\u0854"+
    "\0\u305e\0\u0854\0\u0854\0\u30b0\0\u3102\0\u3154\0\u31a6\0\u31f8"+
    "\0\u0854\0\u0854\0\u324a\0\u329c\0\u0854\0\u32ee\0\u3340\0\u3392"+
    "\0\u33e4\0\u0854\0\u3436\0\u0854\0\u3488\0\u34da\0\122\0\u352c"+
    "\0\u357e\0\u35d0\0\u3622\0\u3674\0\122\0\u36c6\0\u3718\0\u376a"+
    "\0\u37bc\0\u380e\0\u3860\0\122\0\122\0\u0854\0\u38b2\0\u3904"+
    "\0\u3956\0\u39a8\0\u39fa\0\u0854\0\u3a4c\0\u3a9e\0\u3af0\0\u3b42"+
    "\0\u3b94\0\u3be6\0\u0854\0\u0854\0\u3c38\0\u3c8a\0\u3cdc\0\u3d2e"+
    "\0\122\0\u3d80\0\u3dd2\0\122\0\122\0\u3e24\0\u3e76\0\u3ec8"+
    "\0\u3f1a\0\u3f6c\0\u3fbe\0\u0854\0\u4010\0\u4062\0\u0854\0\u0854"+
    "\0\u40b4\0\u4106\0\u4158\0\122\0\122\0\u41aa\0\u41fc\0\u424e"+
    "\0\122\0\122\0\122\0\u42a0\0\u0854\0\u0854\0\u42f2\0\u4344"+
    "\0\u4396\0\u0854\0\u0854\0\u0854\0\u43e8\0\u443a\0\u448c\0\u44de"+
    "\0\122\0\u4530\0\u4582\0\u45d4\0\u4626\0\u0854\0\u4678\0\u46ca"+
    "\0\u471c\0\u476e\0\u47c0\0\u4812\0\u4864\0\u48b6\0\122\0\u4908"+
    "\0\u495a\0\122\0\u49ac\0\u49fe\0\u0854\0\u4a50\0\u4aa2\0\u4af4"+
    "\0\u4b46\0\u4b98\0\u4bea\0\u4c3c\0\u4c8e\0\u4ce0\0\122\0\u4d32"+
    "\0\u0854\0\u4d84\0\u4dd6\0\122\0\u0854";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[325];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\2\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\2\1\35\3\2"+
    "\1\36\1\37\4\2\1\40\1\41\1\2\1\42\1\43"+
    "\2\2\1\44\1\45\1\2\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\46\1\55\3\46\1\56\1\57"+
    "\4\46\1\60\1\61\1\46\1\62\1\63\2\46\1\64"+
    "\1\65\1\66\1\35\1\40\1\2\147\0\1\67\74\0"+
    "\2\70\1\0\2\70\1\71\114\70\7\0\1\72\141\0"+
    "\31\73\3\0\31\73\22\0\1\74\120\0\1\75\4\0"+
    "\1\76\120\0\1\77\1\0\1\21\125\0\1\100\121\0"+
    "\1\101\121\0\1\102\141\0\1\103\2\0\1\104\30\0"+
    "\1\103\2\0\1\104\44\0\1\105\6\0\1\106\6\0"+
    "\1\107\15\0\1\105\6\0\1\106\6\0\1\107\53\0"+
    "\1\110\11\0\1\111\21\0\1\110\11\0\1\111\60\0"+
    "\1\112\1\0\1\113\31\0\1\112\1\0\1\113\52\0"+
    "\1\114\15\0\1\115\15\0\1\114\15\0\1\115\70\0"+
    "\1\116\33\0\1\116\51\0\1\117\7\0\1\120\23\0"+
    "\1\117\7\0\1\120\50\0\1\121\33\0\1\121\71\0"+
    "\1\122\33\0\1\122\104\0\1\123\2\0\1\124\30\0"+
    "\1\123\2\0\1\124\47\0\1\125\10\0\1\126\22\0"+
    "\1\125\10\0\1\126\12\0\1\125\31\0\1\127\15\0"+
    "\1\130\15\0\1\127\15\0\1\130\56\0\1\131\11\0"+
    "\1\132\21\0\1\131\11\0\1\132\76\0\1\133\61\0"+
    "\1\46\40\0\32\46\27\0\1\46\23\0\1\103\2\0"+
    "\1\104\11\0\17\46\1\134\2\46\1\135\7\46\27\0"+
    "\1\46\5\0\1\105\6\0\1\106\6\0\1\107\14\0"+
    "\1\46\1\136\6\46\1\137\6\46\1\140\12\46\27\0"+
    "\1\46\11\0\1\110\11\0\1\111\14\0\5\46\1\141"+
    "\11\46\1\142\12\46\27\0\1\46\16\0\1\112\1\0"+
    "\1\113\17\0\12\46\1\143\1\46\1\144\15\46\27\0"+
    "\1\46\5\0\1\114\15\0\1\115\14\0\1\46\1\145"+
    "\15\46\1\146\12\46\27\0\1\46\26\0\1\116\11\0"+
    "\22\46\1\147\7\46\27\0\1\46\12\0\1\117\7\0"+
    "\1\120\15\0\6\46\1\150\7\46\1\151\13\46\27\0"+
    "\1\46\5\0\1\121\32\0\1\46\1\152\30\46\27\0"+
    "\1\46\11\0\1\122\26\0\5\46\1\153\24\46\27\0"+
    "\1\46\30\0\1\123\2\0\1\124\4\0\24\46\1\154"+
    "\2\46\1\155\2\46\27\0\1\46\15\0\1\125\10\0"+
    "\1\126\11\0\11\46\1\156\10\46\1\157\7\46\3\0"+
    "\1\125\23\0\1\46\5\0\1\127\15\0\1\130\14\0"+
    "\1\46\1\160\15\46\1\161\12\46\27\0\1\46\14\0"+
    "\1\131\11\0\1\132\11\0\10\46\1\162\11\46\1\163"+
    "\7\46\123\0\1\164\14\0\1\165\111\0\13\75\1\166"+
    "\106\75\2\76\1\0\117\76\21\0\1\167\145\0\1\170"+
    "\33\0\1\170\53\0\1\171\33\0\1\171\103\0\1\172"+
    "\33\0\1\172\12\0\1\172\30\0\1\173\33\0\1\173"+
    "\101\0\1\174\1\175\32\0\1\174\1\175\55\0\1\176"+
    "\33\0\1\176\104\0\1\177\33\0\1\177\45\0\1\200"+
    "\33\0\1\200\103\0\1\201\33\0\1\201\12\0\1\201"+
    "\43\0\1\202\33\0\1\202\73\0\1\203\33\0\1\203"+
    "\44\0\1\204\33\0\1\204\110\0\1\205\33\0\1\205"+
    "\52\0\1\206\33\0\1\206\23\0\1\206\57\0\1\207"+
    "\33\0\1\207\60\0\1\210\33\0\1\210\54\0\1\211"+
    "\33\0\1\211\23\0\1\211\54\0\1\212\33\0\1\212"+
    "\66\0\1\213\33\0\1\213\54\0\1\214\33\0\1\214"+
    "\62\0\1\215\33\0\1\215\23\0\1\215\41\0\1\216"+
    "\33\0\1\216\23\0\1\216\41\0\1\217\33\0\1\217"+
    "\23\0\1\217\23\0\1\46\23\0\1\170\14\0\17\46"+
    "\1\220\12\46\27\0\1\46\11\0\1\171\26\0\5\46"+
    "\1\221\24\46\27\0\1\46\27\0\1\172\10\0\23\46"+
    "\1\222\6\46\4\0\1\172\22\0\1\46\5\0\1\173"+
    "\32\0\1\46\1\223\30\46\27\0\1\46\21\0\1\174"+
    "\1\175\15\0\15\46\1\224\1\225\13\46\27\0\1\46"+
    "\12\0\1\176\25\0\6\46\1\226\23\46\27\0\1\46"+
    "\31\0\1\177\6\0\25\46\1\227\4\46\27\0\1\46"+
    "\11\0\1\200\26\0\5\46\1\230\24\46\27\0\1\46"+
    "\27\0\1\201\10\0\23\46\1\231\6\46\4\0\1\201"+
    "\22\0\1\46\20\0\1\202\17\0\14\46\1\232\15\46"+
    "\27\0\1\46\26\0\1\203\11\0\22\46\1\233\7\46"+
    "\27\0\1\46\5\0\1\204\32\0\1\46\1\234\30\46"+
    "\27\0\1\46\30\0\1\205\7\0\24\46\1\235\5\46"+
    "\27\0\1\46\15\0\1\206\22\0\11\46\1\236\20\46"+
    "\3\0\1\206\23\0\1\46\33\0\1\207\4\0\27\46"+
    "\1\237\2\46\27\0\1\46\26\0\1\210\11\0\22\46"+
    "\1\240\7\46\27\0\1\46\15\0\1\211\22\0\11\46"+
    "\1\241\20\46\3\0\1\211\23\0\1\46\30\0\1\212"+
    "\7\0\24\46\1\242\5\46\27\0\1\46\31\0\1\213"+
    "\6\0\25\46\1\243\4\46\27\0\1\46\20\0\1\214"+
    "\17\0\14\46\1\244\15\46\27\0\1\46\15\0\1\215"+
    "\22\0\11\46\1\245\20\46\3\0\1\215\23\0\1\46"+
    "\15\0\1\216\22\0\11\46\1\246\20\46\3\0\1\216"+
    "\23\0\1\46\15\0\1\217\22\0\11\46\1\247\20\46"+
    "\3\0\1\217\2\0\13\75\1\166\4\75\1\250\101\75"+
    "\42\0\1\251\33\0\1\251\52\0\1\252\33\0\1\252"+
    "\71\0\1\253\33\0\1\253\102\0\1\254\33\0\1\254"+
    "\50\0\1\255\33\0\1\255\103\0\1\256\33\0\1\256"+
    "\12\0\1\256\30\0\1\257\7\0\1\260\23\0\1\257"+
    "\7\0\1\260\23\0\1\260\32\0\1\261\33\0\1\261"+
    "\113\0\1\262\33\0\1\262\42\0\1\263\33\0\1\263"+
    "\103\0\1\264\33\0\1\264\12\0\1\264\35\0\1\265"+
    "\33\0\1\265\75\0\1\266\33\0\1\266\75\0\1\267"+
    "\33\0\1\267\50\0\1\270\33\0\1\270\23\0\1\270"+
    "\54\0\1\271\33\0\1\271\66\0\1\272\33\0\1\272"+
    "\45\0\1\273\33\0\1\273\77\0\1\274\33\0\1\274"+
    "\52\0\1\275\33\0\1\275\75\0\1\276\33\0\1\276"+
    "\75\0\1\277\33\0\1\277\34\0\1\46\20\0\1\251"+
    "\17\0\14\46\1\300\15\46\27\0\1\46\5\0\1\252"+
    "\32\0\1\46\1\301\30\46\27\0\1\46\11\0\1\253"+
    "\26\0\5\46\1\302\24\46\27\0\1\46\26\0\1\254"+
    "\11\0\22\46\1\303\7\46\27\0\1\46\11\0\1\255"+
    "\26\0\5\46\1\304\24\46\27\0\1\46\27\0\1\256"+
    "\10\0\23\46\1\305\6\46\4\0\1\256\22\0\1\46"+
    "\5\0\1\257\7\0\1\260\22\0\1\46\1\306\7\46"+
    "\1\307\20\46\3\0\1\260\23\0\1\46\6\0\1\261"+
    "\31\0\2\46\1\310\27\46\27\0\1\46\34\0\1\262"+
    "\3\0\30\46\1\311\1\46\27\0\1\46\11\0\1\263"+
    "\26\0\5\46\1\312\24\46\27\0\1\46\27\0\1\264"+
    "\10\0\23\46\1\313\6\46\4\0\1\264\22\0\1\46"+
    "\12\0\1\265\25\0\6\46\1\314\23\46\27\0\1\46"+
    "\22\0\1\266\15\0\16\46\1\315\13\46\27\0\1\46"+
    "\32\0\1\267\5\0\26\46\1\316\3\46\27\0\1\46"+
    "\15\0\1\270\22\0\11\46\1\317\20\46\3\0\1\270"+
    "\23\0\1\46\30\0\1\271\7\0\24\46\1\320\5\46"+
    "\27\0\1\46\31\0\1\272\6\0\25\46\1\321\4\46"+
    "\27\0\1\46\11\0\1\273\26\0\5\46\1\322\24\46"+
    "\27\0\1\46\23\0\1\274\14\0\17\46\1\323\12\46"+
    "\27\0\1\46\10\0\1\275\27\0\4\46\1\324\25\46"+
    "\27\0\1\46\20\0\1\276\17\0\14\46\1\325\15\46"+
    "\27\0\1\46\30\0\1\277\7\0\24\46\1\326\5\46"+
    "\47\0\1\327\33\0\1\327\23\0\1\327\44\0\1\330"+
    "\33\0\1\330\66\0\1\331\33\0\1\331\73\0\1\332"+
    "\33\0\1\332\56\0\1\333\33\0\1\333\63\0\1\334"+
    "\33\0\1\334\56\0\1\335\33\0\1\335\71\0\1\336"+
    "\33\0\1\336\23\0\1\336\31\0\1\337\33\0\1\337"+
    "\102\0\1\340\33\0\1\340\52\0\1\341\33\0\1\341"+
    "\76\0\1\342\33\0\1\342\73\0\1\343\33\0\1\343"+
    "\50\0\1\344\33\0\1\344\65\0\1\345\33\0\1\345"+
    "\53\0\1\46\17\0\1\327\20\0\13\46\1\346\16\46"+
    "\5\0\1\327\21\0\1\46\22\0\1\330\15\0\16\46"+
    "\1\347\13\46\27\0\1\46\23\0\1\331\14\0\17\46"+
    "\1\350\12\46\27\0\1\46\31\0\1\332\6\0\25\46"+
    "\1\351\4\46\27\0\1\46\22\0\1\333\15\0\16\46"+
    "\1\352\13\46\27\0\1\46\20\0\1\334\17\0\14\46"+
    "\1\353\15\46\27\0\1\46\11\0\1\335\26\0\5\46"+
    "\1\354\24\46\27\0\1\46\15\0\1\336\22\0\11\46"+
    "\1\355\20\46\3\0\1\336\23\0\1\46\5\0\1\337"+
    "\32\0\1\46\1\356\30\46\27\0\1\46\22\0\1\340"+
    "\15\0\16\46\1\357\13\46\27\0\1\46\7\0\1\341"+
    "\30\0\3\46\1\360\26\46\27\0\1\46\20\0\1\342"+
    "\17\0\14\46\1\361\15\46\27\0\1\46\26\0\1\343"+
    "\11\0\22\46\1\362\7\46\27\0\1\46\11\0\1\344"+
    "\26\0\5\46\1\363\24\46\27\0\1\46\11\0\1\345"+
    "\26\0\5\46\1\364\24\46\60\0\1\365\33\0\1\365"+
    "\55\0\1\366\33\0\1\366\65\0\1\367\33\0\1\367"+
    "\62\0\1\370\33\0\1\370\23\0\1\370\35\0\1\371"+
    "\33\0\1\371\63\0\1\372\33\0\1\372\76\0\1\373"+
    "\33\0\1\373\60\0\1\374\33\0\1\374\66\0\1\375"+
    "\33\0\1\375\74\0\1\376\33\0\1\376\53\0\1\377"+
    "\33\0\1\377\53\0\1\46\30\0\1\365\7\0\24\46"+
    "\1\u0100\5\46\27\0\1\46\20\0\1\366\17\0\14\46"+
    "\1\u0101\15\46\27\0\1\46\20\0\1\367\17\0\14\46"+
    "\1\u0102\15\46\27\0\1\46\15\0\1\370\22\0\11\46"+
    "\1\u0103\20\46\3\0\1\370\23\0\1\46\11\0\1\371"+
    "\26\0\5\46\1\u0104\24\46\27\0\1\46\7\0\1\372"+
    "\30\0\3\46\1\u0105\26\46\27\0\1\46\20\0\1\373"+
    "\17\0\14\46\1\u0106\15\46\27\0\1\46\13\0\1\374"+
    "\24\0\7\46\1\u0107\22\46\27\0\1\46\14\0\1\375"+
    "\23\0\10\46\1\u0108\21\46\27\0\1\46\23\0\1\376"+
    "\14\0\17\46\1\u0109\12\46\27\0\1\46\11\0\1\377"+
    "\26\0\5\46\1\u010a\24\46\35\0\1\u010b\33\0\1\u010b"+
    "\71\0\1\u010c\33\0\1\u010c\104\0\1\u010d\33\0\1\u010d"+
    "\63\0\1\u010e\33\0\1\u010e\44\0\1\u010f\33\0\1\u010f"+
    "\103\0\1\u0110\33\0\1\u0110\76\0\1\u0111\1\u0112\32\0"+
    "\1\u0111\1\u0112\57\0\1\u0113\33\0\1\u0113\12\0\1\u0113"+
    "\22\0\1\46\5\0\1\u010b\32\0\1\46\1\u0114\30\46"+
    "\27\0\1\46\11\0\1\u010c\26\0\5\46\1\u0115\24\46"+
    "\27\0\1\46\30\0\1\u010d\7\0\24\46\1\u0116\5\46"+
    "\27\0\1\46\26\0\1\u010e\11\0\22\46\1\u0117\7\46"+
    "\27\0\1\46\5\0\1\u010f\32\0\1\46\1\u0118\30\46"+
    "\27\0\1\46\23\0\1\u0110\14\0\17\46\1\u0119\12\46"+
    "\27\0\1\46\34\0\1\u0111\1\u0112\2\0\30\46\1\u011a"+
    "\1\u011b\27\0\1\46\27\0\1\u0113\10\0\23\46\1\u011c"+
    "\6\46\4\0\1\u0113\51\0\1\u011d\33\0\1\u011d\52\0"+
    "\1\u011e\33\0\1\u011e\60\0\1\u011f\15\0\1\u0120\15\0"+
    "\1\u011f\15\0\1\u0120\67\0\1\u0121\33\0\1\u0121\36\0"+
    "\1\46\26\0\1\u011d\11\0\22\46\1\u0122\7\46\27\0"+
    "\1\46\13\0\1\u011e\24\0\7\46\1\u0123\22\46\27\0"+
    "\1\46\6\0\1\u011f\15\0\1\u0120\13\0\2\46\1\u0124"+
    "\15\46\1\u0125\11\46\27\0\1\46\26\0\1\u0121\11\0"+
    "\22\46\1\u0126\7\46\45\0\1\u0127\33\0\1\u0127\23\0"+
    "\1\u0127\44\0\1\u0128\33\0\1\u0128\52\0\1\u0129\33\0"+
    "\1\u0129\75\0\1\u012a\33\0\1\u012a\23\0\1\u012a\23\0"+
    "\1\46\15\0\1\u0127\22\0\11\46\1\u012b\20\46\3\0"+
    "\1\u0127\23\0\1\46\20\0\1\u0128\17\0\14\46\1\u012c"+
    "\15\46\27\0\1\46\5\0\1\u0129\32\0\1\46\1\u012d"+
    "\30\46\27\0\1\46\15\0\1\u012a\22\0\11\46\1\u012e"+
    "\20\46\3\0\1\u012a\47\0\1\u012f\33\0\1\u012f\65\0"+
    "\1\u0130\33\0\1\u0130\70\0\1\u0131\33\0\1\u0131\50\0"+
    "\1\u0132\33\0\1\u0132\53\0\1\46\23\0\1\u012f\14\0"+
    "\32\46\27\0\1\46\23\0\1\u0130\14\0\17\46\1\u0133"+
    "\12\46\27\0\1\46\26\0\1\u0131\11\0\22\46\1\u0134"+
    "\7\46\27\0\1\46\11\0\1\u0132\26\0\5\46\1\u0135"+
    "\24\46\36\0\1\u0136\33\0\1\u0136\105\0\1\u0137\33\0"+
    "\1\u0137\36\0\1\46\6\0\1\u0136\31\0\2\46\1\u0138"+
    "\27\46\27\0\1\46\26\0\1\u0137\11\0\22\46\1\u0139"+
    "\7\46\35\0\1\u013a\33\0\1\u013a\65\0\1\u013b\33\0"+
    "\1\u013b\57\0\1\46\5\0\1\u013a\32\0\1\46\1\u013c"+
    "\30\46\27\0\1\46\5\0\1\u013b\32\0\1\46\1\u013d"+
    "\30\46\50\0\1\u013e\33\0\1\u013e\74\0\1\u013f\33\0"+
    "\1\u013f\12\0\1\u013f\22\0\1\46\20\0\1\u013e\17\0"+
    "\14\46\1\u0140\15\46\27\0\1\46\27\0\1\u013f\10\0"+
    "\23\46\1\u0141\6\46\4\0\1\u013f\34\0\1\u0142\33\0"+
    "\1\u0142\53\0\1\46\11\0\1\u0142\26\0\5\46\1\u0143"+
    "\24\46\57\0\1\u0144\33\0\1\u0144\12\0\1\u0144\22\0"+
    "\1\46\27\0\1\u0144\10\0\23\46\1\u0145\6\46\4\0"+
    "\1\u0144\1\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[20008];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\2\1\1\11\2\1\3\11\1\1\3\11"+
    "\2\1\2\11\21\1\1\11\16\1\1\11\1\1\2\11"+
    "\1\0\2\11\1\0\1\11\1\0\1\1\1\0\3\11"+
    "\6\0\1\1\5\0\1\11\13\0\1\11\30\1\2\11"+
    "\1\0\1\1\13\0\1\11\1\0\1\11\12\0\30\1"+
    "\2\11\1\0\2\11\5\0\2\11\2\0\1\11\4\0"+
    "\1\11\1\0\1\11\2\0\27\1\1\11\5\0\1\11"+
    "\6\0\2\11\17\1\4\0\1\11\2\0\2\11\1\1"+
    "\1\0\13\1\1\0\2\11\3\0\3\11\11\1\4\0"+
    "\1\11\5\1\4\0\4\1\1\11\2\0\1\11\3\1"+
    "\2\0\2\1\2\0\2\1\1\0\1\11\2\1\1\0"+
    "\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[325];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { Erroor errorsito = new Erroor("Lexico", yytext() ,"No es válido en este lenguaje", yyline, yycolumn);Funcion.ErrorList.add(errorsito);System.out.println("Error Lexico: " + yytext() + " | Fila:" + yyline + " | Columna: " + yycolumn);
            }
          // fall through
          case 67: break;
          case 2:
            { /* Espacios en blanco se ignoran */
            }
          // fall through
          case 68: break;
          case 3:
            { Token NuevoToken = new Token("TkNOT",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkNOT> Tk: " + yytext());return new Symbol(sym.TkNOT, yycolumn, yyline, yytext());
            }
          // fall through
          case 69: break;
          case 4:
            { Token NuevoToken = new Token("TkSignoDolar",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkSignoDolar> Tk: " + yytext());return new Symbol(sym.TkSignoDolar, yycolumn, yyline, yytext());
            }
          // fall through
          case 70: break;
          case 5:
            { Token NuevoToken = new Token("TkPARENTESISAbre",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkPARENTESISAbre> Tk: " + yytext());return new Symbol(sym.TkPARENTESISAbre, yycolumn, yyline, yytext());
            }
          // fall through
          case 71: break;
          case 6:
            { Token NuevoToken = new Token("TkPARENTESISCierra",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkPARENTESISCierra> Tk: " + yytext());return new Symbol(sym.TkPARENTESISCierra, yycolumn, yyline, yytext());
            }
          // fall through
          case 72: break;
          case 7:
            { Token NuevoToken = new Token("TkMULTIPLICACION",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkMULTIPLICACION> Tk: " + yytext());return new Symbol(sym.TkMULTIPLICACION, yycolumn, yyline, yytext());
            }
          // fall through
          case 73: break;
          case 8:
            { Token NuevoToken = new Token("TkSUMA",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkSUMA> Tk: " + yytext());return new Symbol(sym.TkSUMA, yycolumn, yyline, yytext());
            }
          // fall through
          case 74: break;
          case 9:
            { Token NuevoToken = new Token("TkCOMA",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkCOMA> Tk: " + yytext());return new Symbol(sym.TkCOMA, yycolumn, yyline, yytext());
            }
          // fall through
          case 75: break;
          case 10:
            { Token NuevoToken = new Token("TkRESTA",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkRESTA> Tk: " + yytext());return new Symbol(sym.TkRESTA, yycolumn, yyline, yytext());
            }
          // fall through
          case 76: break;
          case 11:
            { Token NuevoToken = new Token("TkPUNTO",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkPUNTO> Tk: " + yytext());return new Symbol(sym.TkPUNTO, yycolumn, yyline, yytext());
            }
          // fall through
          case 77: break;
          case 12:
            { Token NuevoToken = new Token("TkDIVISION",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkDIVISION> Tk: " + yytext());return new Symbol(sym.TkDIVISION, yycolumn, yyline, yytext());
            }
          // fall through
          case 78: break;
          case 13:
            { Token NuevoToken = new Token("TkENTERO",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkENTERO> Tk: " + yytext());return new Symbol(sym.TkENTERO, yycolumn, yyline, yytext());
            }
          // fall through
          case 79: break;
          case 14:
            { Token NuevoToken = new Token("TkDOSPUNTOS",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkDOSPUNTOS> Tk: " + yytext());return new Symbol(sym.TkDOSPUNTOS, yycolumn, yyline, yytext());
            }
          // fall through
          case 80: break;
          case 15:
            { Token NuevoToken = new Token("TkPUNTOYCOMA",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkPUNTOYCOMA> Tk: " + yytext());return new Symbol(sym.TkPUNTOYCOMA, yycolumn, yyline, yytext());
            }
          // fall through
          case 81: break;
          case 16:
            { Token NuevoToken = new Token("TkMENORQUE",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkMENORQUE> Tk: " + yytext());return new Symbol(sym.TkMENORQUE, yycolumn, yyline, yytext());
            }
          // fall through
          case 82: break;
          case 17:
            { Token NuevoToken = new Token("TkIGUAL",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkIGUAL> Tk: " + yytext());return new Symbol(sym.TkIGUAL, yycolumn, yyline, yytext());
            }
          // fall through
          case 83: break;
          case 18:
            { Token NuevoToken = new Token("TkMAYORQUE",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);  System.out.println("Se acepto el Token  <TkMAYORQUE> Tk: " + yytext());return new Symbol(sym.TkMAYORQUE, yycolumn, yyline, yytext());
            }
          // fall through
          case 84: break;
          case 19:
            { Token NuevoToken = new Token("TkCORCHETEAbre",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkCORCHETEAbre> Tk: " + yytext());return new Symbol(sym.TkCORCHETEAbre, yycolumn, yyline, yytext());
            }
          // fall through
          case 85: break;
          case 20:
            { Token NuevoToken = new Token("TkCORCHETECierra",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkCORCHETECierra> Tk: " + yytext());return new Symbol(sym.TkCORCHETECierra, yycolumn, yyline, yytext());
            }
          // fall through
          case 86: break;
          case 21:
            { Token NuevoToken = new Token("TkIdentificador",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkIdentificador> Tk: " + yytext());return new Symbol(sym.TkIdentificador, yycolumn, yyline, yytext());
            }
          // fall through
          case 87: break;
          case 22:
            { Token NuevoToken = new Token("TkLLAVEA",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkLLAVEA> Tk: " + yytext());return new Symbol(sym.TkLLAVEA, yycolumn, yyline, yytext());
            }
          // fall through
          case 88: break;
          case 23:
            { Token NuevoToken = new Token("TkLLAVEC",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkLLAVEC> Tk: " + yytext());return new Symbol(sym.TkLLAVEC, yycolumn, yyline, yytext());
            }
          // fall through
          case 89: break;
          case 24:
            { Token NuevoToken = new Token("TkIDISTINTO",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkIDISTINTO> Tk: " + yytext());return new Symbol(sym.TkIDISTINTO, yycolumn, yyline, yytext());
            }
          // fall through
          case 90: break;
          case 25:
            { Token NuevoToken = new Token("TkCADENA",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkCADENA> Tk: " + yytext());return new Symbol(sym.TkCADENA, yycolumn, yyline, yytext());
            }
          // fall through
          case 91: break;
          case 26:
            { Token NuevoToken = new Token("TkAND",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkAND> Tk: " + yytext());return new Symbol(sym.TkAND, yycolumn, yyline, yytext());
            }
          // fall through
          case 92: break;
          case 27:
            { Token NuevoToken = new Token("TkIncremento",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkIncremento> Tk: " + yytext());return new Symbol(sym.TkIncremento, yycolumn, yyline, yytext());
            }
          // fall through
          case 93: break;
          case 28:
            { /*se ignoran comentarios de una linea */
            }
          // fall through
          case 94: break;
          case 29:
            { Token NuevoToken = new Token("TkMENORIGUAL",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkMENORIGUAL> Tk: " + yytext());return new Symbol(sym.TkMENORIGUAL, yycolumn, yyline, yytext());
            }
          // fall through
          case 95: break;
          case 30:
            { Token NuevoToken = new Token("TkIGUALIGUAL",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkIGUALIGUAL> Tk: " + yytext());return new Symbol(sym.TkIGUALIGUAL, yycolumn, yyline, yytext());
            }
          // fall through
          case 96: break;
          case 31:
            { Token NuevoToken = new Token("TkMAYORIGUAL",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkMAYORIGUAL> Tk: " + yytext());return new Symbol(sym.TkMAYORIGUAL, yycolumn, yyline, yytext());
            }
          // fall through
          case 97: break;
          case 32:
            { Token NuevoToken = new Token("TkDO_R",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkDO_R> Tk: " + yytext());return new Symbol(sym.TkDO_R, yycolumn, yyline, yytext());
            }
          // fall through
          case 98: break;
          case 33:
            { Token NuevoToken = new Token("TkIF_R",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkIF_R> Tk: "  + yytext());return new Symbol(sym.TkIF_R, yycolumn, yyline, yytext());
            }
          // fall through
          case 99: break;
          case 34:
            { Token NuevoToken = new Token("TkCorchetesArreglo",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkCorchetesArreglo> Tk: " + yytext());return new Symbol(sym.TkCorchetesArreglo, yycolumn, yyline, yytext());
            }
          // fall through
          case 100: break;
          case 35:
            { Token NuevoToken = new Token("TkOR",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkOR> Tk: " + yytext());return new Symbol(sym.TkOR, yycolumn, yyline, yytext());
            }
          // fall through
          case 101: break;
          case 36:
            { Token NuevoToken = new Token("TkErChar",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkErChar> Tk: " + yytext());return new Symbol(sym.TkErChar, yycolumn, yyline, yytext());
            }
          // fall through
          case 102: break;
          case 37:
            { Token NuevoToken = new Token("TkDECIMAL",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkDECIMAL> Tk: " + yytext());return new Symbol(sym.TkDECIMAL, yycolumn, yyline, yytext());
            }
          // fall through
          case 103: break;
          case 38:
            { Token NuevoToken = new Token("TkFOR_R",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkFOR_R> Tk: "  + yytext());return new Symbol(sym.TkFOR_R, yycolumn, yyline, yytext());
            }
          // fall through
          case 104: break;
          case 39:
            { Token NuevoToken = new Token("TkINT_R",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkINT_R> Tk: "  + yytext());return new Symbol(sym.TkINT_R, yycolumn, yyline, yytext());
            }
          // fall through
          case 105: break;
          case 40:
            { /*se ignoran comentarios multilinea */
            }
          // fall through
          case 106: break;
          case 41:
            { Token NuevoToken = new Token("TkBOOL_R",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkBOOL_R> Tk: "  +yytext());return new Symbol(sym.TkBOOL_R, yycolumn, yyline, yytext());
            }
          // fall through
          case 107: break;
          case 42:
            { Token NuevoToken = new Token("TkCASE_R",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkCASE_R> Tk: "  + yytext());return new Symbol(sym.TkCASE_R, yycolumn, yyline, yytext());
            }
          // fall through
          case 108: break;
          case 43:
            { Token NuevoToken = new Token("TkCHAR_R",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkCHAR_R> Tk: "  + yytext());return new Symbol(sym.TkCHAR_R, yycolumn, yyline, yytext());
            }
          // fall through
          case 109: break;
          case 44:
            { Token NuevoToken = new Token("TkEjeX",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkEjeX> Tk: "  + yytext());return new Symbol(sym.TkEjeX, yycolumn, yyline, yytext());
            }
          // fall through
          case 110: break;
          case 45:
            { Token NuevoToken = new Token("TkELSE_R",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkELSE_R> Tk: " + yytext());return new Symbol(sym.TkELSE_R, yycolumn, yyline, yytext());
            }
          // fall through
          case 111: break;
          case 46:
            { Token NuevoToken = new Token("TkMAIN_R",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkMAIN_R> Tk: "  + yytext());return new Symbol(sym.TkMAIN_R, yycolumn, yyline, yytext());
            }
          // fall through
          case 112: break;
          case 47:
            { Token NuevoToken = new Token("TkTrue",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkTrue> Tk: "  + yytext());return new Symbol(sym.TkTrue, yycolumn, yyline, yytext());
            }
          // fall through
          case 113: break;
          case 48:
            { Token NuevoToken = new Token("TkVOID_R",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkVOID_R> Tk: "  + yytext());return new Symbol(sym.TkVOID_R, yycolumn, yyline, yytext());
            }
          // fall through
          case 114: break;
          case 49:
            { Token NuevoToken = new Token("TkBRAKE_R",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkBRAKE_R> Tk: "  + yytext());return new Symbol(sym.TkBRAKE_R, yycolumn, yyline, yytext());
            }
          // fall through
          case 115: break;
          case 50:
            { Token NuevoToken = new Token("TkFalse",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkFalse> Tk: "  + yytext());return new Symbol(sym.TkFalse, yycolumn, yyline, yytext());
            }
          // fall through
          case 116: break;
          case 51:
            { Token NuevoToken = new Token("TkWHILE_R",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkWHILE_R> Tk: "  + yytext());return new Symbol(sym.TkWHILE_R, yycolumn, yyline, yytext());
            }
          // fall through
          case 117: break;
          case 52:
            { Token NuevoToken = new Token("TkWRITE_R",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkWRITE_R> Tk: " + yytext());return new Symbol(sym.TkWRITE_R, yycolumn, yyline, yytext());
            }
          // fall through
          case 118: break;
          case 53:
            { Token NuevoToken = new Token("TkINT_R",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkINT_R> Tk: " + yytext());return new Symbol(sym.TkINT_R, yycolumn, yyline, yytext());
            }
          // fall through
          case 119: break;
          case 54:
            { Token NuevoToken = new Token("TkSTRING_R",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkSTRING_R> Tk: "  + yytext());return new Symbol(sym.TkSTRING_R, yycolumn, yyline, yytext());
            }
          // fall through
          case 120: break;
          case 55:
            { Token NuevoToken = new Token("TkSWITCH_R",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkSWITCH_R> Tk: "  + yytext());return new Symbol(sym.TkSWITCH_R, yycolumn, yyline, yytext());
            }
          // fall through
          case 121: break;
          case 56:
            { Token NuevoToken = new Token("TkTitulo",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkTitulo> Tk: "  + yytext());return new Symbol(sym.TkTitulo, yycolumn, yyline, yytext());
            }
          // fall through
          case 122: break;
          case 57:
            { Token NuevoToken = new Token("TkCONSOLE_R",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkCONSOLE_R> Tk: " + yytext());return new Symbol(sym.TkCONSOLE_R, yycolumn, yyline, yytext());
            }
          // fall through
          case 123: break;
          case 58:
            { Token NuevoToken = new Token("TkDEFAULT_R",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkDEFAULT_R> Tk: " + yytext());return new Symbol(sym.TkDEFAULT_R, yycolumn, yyline, yytext());
            }
          // fall through
          case 124: break;
          case 59:
            { Token NuevoToken = new Token("TkTituloX",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkTituloX> Tk: "  + yytext());return new Symbol(sym.TkTituloX, yycolumn, yyline, yytext());
            }
          // fall through
          case 125: break;
          case 60:
            { Token NuevoToken = new Token("TkTituloY",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkTituloY> Tk: "  + yytext());return new Symbol(sym.TkTituloY, yycolumn, yyline, yytext());
            }
          // fall through
          case 126: break;
          case 61:
            { Token NuevoToken = new Token("TkValores",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkValores> Tk: "  + yytext());return new Symbol(sym.TkValores, yycolumn, yyline, yytext());
            }
          // fall through
          case 127: break;
          case 62:
            { Token NuevoToken = new Token("TkNewValor",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkNewValor> Tk: "  + yytext());return new Symbol(sym.TkNewValor, yycolumn, yyline, yytext());
            }
          // fall through
          case 128: break;
          case 63:
            { 
            }
          // fall through
          case 129: break;
          case 64:
            { Token NuevoToken = new Token("TkGRAFICA_PIE_R",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkGRAFICA_PIE_R> Tk: "  + yytext());return new Symbol(sym.TkGRAFICA_PIE_R, yycolumn, yyline, yytext());
            }
          // fall through
          case 130: break;
          case 65:
            { Token NuevoToken = new Token("TkGRAFICA_BARRAS_R",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkGRAFICA_BARRAS_R> Tk: "  + yytext());return new Symbol(sym.TkGRAFICA_BARRAS_R, yycolumn, yyline, yytext());
            }
          // fall through
          case 131: break;
          case 66:
            { Token NuevoToken = new Token("TkDEFINIR_GLOBALES_R",yytext(),yyline,yycolumn);Funcion.TokenList.add(NuevoToken);System.out.println("Se acepto el Token  <TkDEFINIR_GLOBALES_R> Tk: " + yytext());return new Symbol(sym.TkDEFINIR_GLOBALES_R, yycolumn, yyline, yytext());
            }
          // fall through
          case 132: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
